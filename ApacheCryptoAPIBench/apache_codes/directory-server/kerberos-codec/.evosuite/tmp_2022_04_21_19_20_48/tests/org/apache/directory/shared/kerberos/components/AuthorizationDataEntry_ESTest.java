/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:48:38 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.shared.kerberos.codec.types.AuthorizationType;
import org.apache.directory.shared.kerberos.components.AuthorizationDataEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AuthorizationDataEntry_ESTest extends AuthorizationDataEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      authorizationDataEntry0.getAdType();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.OSF_DCE;
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, (byte[]) null);
      AuthorizationType authorizationType1 = authorizationDataEntry0.getAdType();
      assertEquals(64, authorizationType1.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_FOR_KDC;
      byte[] byteArray0 = new byte[5];
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      byte[] byteArray1 = authorizationDataEntry0.getAdDataRef();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.NULL;
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, (byte[]) null);
      // Undeclared exception!
      try { 
        authorizationDataEntry0.equals("org.apache.directory.shared.kerberos.components.AuthorizationDataEntryAuthorizationDataEntry : {\norg.apache.directory.shared.kerberos.components.AuthorizationDataEntry    adType : null(0)\norg.apache.directory.shared.kerberos.components.AuthorizationDataEntry    adData : \norg.apache.directory.shared.kerberos.components.AuthorizationDataEntry}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.directory.shared.kerberos.components.AuthorizationDataEntry
         //
         verifyException("org.apache.directory.shared.kerberos.components.AuthorizationDataEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      String string0 = authorizationDataEntry0.toString("=,[{V&nEg2P3{b9");
      assertEquals("=,[{V&nEg2P3{b9AuthorizationDataEntry : {\n=,[{V&nEg2P3{b9    adType : null\n=,[{V&nEg2P3{b9    adData : \n=,[{V&nEg2P3{b9}", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      AuthorizationDataEntry authorizationDataEntry1 = new AuthorizationDataEntry();
      boolean boolean0 = authorizationDataEntry0.equals(authorizationDataEntry1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_FOR_KDC;
      byte[] byteArray0 = new byte[7];
      AuthorizationDataEntry authorizationDataEntry1 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      authorizationDataEntry0.setAdData(byteArray0);
      boolean boolean0 = authorizationDataEntry1.equals(authorizationDataEntry0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      boolean boolean0 = authorizationDataEntry0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      boolean boolean0 = authorizationDataEntry0.equals(authorizationDataEntry0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_FOR_KDC;
      byte[] byteArray0 = new byte[7];
      AuthorizationDataEntry authorizationDataEntry1 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      boolean boolean0 = authorizationDataEntry0.equals(authorizationDataEntry1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      authorizationDataEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_MANDATORY_FOR_KDC;
      byte[] byteArray0 = new byte[7];
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      authorizationDataEntry0.hashCode();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      byte[] byteArray0 = authorizationDataEntry0.getAdData();
      authorizationDataEntry0.setAdData(byteArray0);
      byte[] byteArray1 = authorizationDataEntry0.getAdDataRef();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.AD_INTENDED_FOR_SERVER;
      byte[] byteArray0 = new byte[1];
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, byteArray0);
      byte[] byteArray1 = authorizationDataEntry0.getAdData();
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.NULL;
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, (byte[]) null);
      authorizationDataEntry0.setAdType(authorizationType0);
      assertEquals(AuthorizationType.NULL, authorizationDataEntry0.getAdType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.NULL;
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, (byte[]) null);
      AuthorizationType authorizationType1 = authorizationDataEntry0.getAdType();
      assertSame(authorizationType1, authorizationType0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AuthorizationType authorizationType0 = AuthorizationType.NULL;
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry(authorizationType0, (byte[]) null);
      byte[] byteArray0 = authorizationDataEntry0.getAdDataRef();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AuthorizationDataEntry authorizationDataEntry0 = new AuthorizationDataEntry();
      String string0 = authorizationDataEntry0.toString();
      assertEquals("AuthorizationDataEntry : {\n    adType : null\n    adData : \n}", string0);
  }
}
