/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:46:03 GMT 2022
 */

package org.apache.directory.shared.kerberos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.util.Date;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KerberosTime_ESTest extends KerberosTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime((-1241L));
      boolean boolean0 = kerberosTime0.isZero();
      assertFalse(boolean0);
      assertEquals((-1000L), kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      MockDate mockDate0 = new MockDate(86400000, 1887, 166);
      KerberosTime kerberosTime1 = new KerberosTime(mockDate0);
      boolean boolean0 = kerberosTime1.greaterThan(kerberosTime0);
      assertFalse(boolean0);
      assertEquals(2726523420364800000L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      KerberosTime kerberosTime1 = KerberosTime.INFINITY;
      boolean boolean0 = kerberosTime0.lessThan(kerberosTime1);
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      boolean boolean0 = kerberosTime0.isInClockSkew(60000);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      KerberosTime kerberosTime1 = new KerberosTime();
      boolean boolean0 = kerberosTime1.equals(kerberosTime0);
      assertEquals(1392409281000L, kerberosTime1.getTime());
      assertFalse(kerberosTime0.equals((Object)kerberosTime1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime("20140214202121Z");
      assertEquals(0L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.getTime("19691231235958Z");
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime((-200L));
      long long0 = kerberosTime0.getTime();
      assertEquals(0L, long0);
      assertEquals("19691231235959Z", kerberosTime0.getDate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime((-1241L));
      long long0 = kerberosTime0.getTime();
      assertEquals((-1000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      // Undeclared exception!
      try { 
        kerberosTime0.setDate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      // Undeclared exception!
      try { 
        kerberosTime0.lessThan((KerberosTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      // Undeclared exception!
      try { 
        kerberosTime0.greaterThan((KerberosTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        KerberosTime.getTime("org.apache.directory.api.util.Strings");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"org.apache.directory.api.util.Strings\"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosTime.getTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        kerberosTime0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.directory.shared.kerberos.KerberosTime
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      // Undeclared exception!
      try { 
        kerberosTime0.compareTo((KerberosTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KerberosTime kerberosTime0 = null;
      try {
        kerberosTime0 = new KerberosTime((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KerberosTime kerberosTime0 = null;
      try {
        kerberosTime0 = new KerberosTime("a7X0|L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bad time : a7X0|L
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime((-1241L));
      KerberosTime kerberosTime1 = new KerberosTime(0L);
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      
      kerberosTime0.setDate("19691231235958Z");
      int int0 = kerberosTime1.compareTo(kerberosTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      try { 
        kerberosTime0.INFINITY.setDate("Bad time : ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Bad time : \"
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime((-200L));
      boolean boolean0 = kerberosTime0.isZero();
      assertEquals("19691231235959Z", kerberosTime0.getDate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      boolean boolean0 = kerberosTime0.isZero();
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      System.setCurrentTimeMillis(86400000);
      KerberosTime kerberosTime1 = new KerberosTime();
      boolean boolean0 = kerberosTime0.greaterThan(kerberosTime1);
      assertTrue(boolean0);
      assertEquals(86400000L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime((-1241L));
      boolean boolean0 = kerberosTime0.greaterThan(kerberosTime0);
      assertFalse(boolean0);
      assertEquals((-1000L), kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      boolean boolean0 = kerberosTime0.lessThan(kerberosTime0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      KerberosTime kerberosTime1 = KerberosTime.INFINITY;
      boolean boolean0 = kerberosTime1.lessThan(kerberosTime0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      KerberosTime kerberosTime1 = new KerberosTime(86400000);
      int int0 = kerberosTime0.compareTo(kerberosTime1);
      assertEquals("19700102000000Z", kerberosTime1.getDate());
      assertEquals(1, int0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      int int0 = kerberosTime0.compareTo(kerberosTime0);
      assertEquals(0, int0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      KerberosTime kerberosTime1 = KerberosTime.INFINITY;
      int int0 = kerberosTime0.compareTo(kerberosTime1);
      assertEquals((-1), int0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      boolean boolean0 = kerberosTime0.isInClockSkew(60000);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      boolean boolean0 = kerberosTime0.isInClockSkew(320L);
      assertFalse(boolean0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      System.setCurrentTimeMillis(86400000);
      KerberosTime kerberosTime1 = new KerberosTime();
      boolean boolean0 = kerberosTime0.equals(kerberosTime1);
      assertEquals(86400000L, kerberosTime1.getTime());
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      boolean boolean0 = kerberosTime0.equals((Object) null);
      assertTrue(boolean0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      boolean boolean0 = kerberosTime0.equals(kerberosTime0);
      assertTrue(boolean0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      KerberosTime kerberosTime1 = new KerberosTime();
      boolean boolean0 = kerberosTime0.equals(kerberosTime1);
      assertTrue(boolean0);
      assertEquals(1392409281000L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      String string0 = kerberosTime0.getDate();
      assertEquals("2922789940817071255Z", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      kerberosTime0.toString();
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      long long0 = kerberosTime0.getTime();
      assertEquals(1392409281000L, long0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      kerberosTime0.hashCode();
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      Date date0 = kerberosTime0.toDate();
      KerberosTime kerberosTime1 = new KerberosTime(date0);
      assertEquals(1392409281000L, kerberosTime1.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      kerberosTime0.getBytes();
      assertEquals(1392409281000L, kerberosTime0.getTime());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KerberosTime kerberosTime0 = null;
      try {
        kerberosTime0 = new KerberosTime((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }
}
