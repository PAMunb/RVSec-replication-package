/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:49:26 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.shared.kerberos.codec.types.TransitedEncodingType;
import org.apache.directory.shared.kerberos.components.TransitedEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TransitedEncoding_ESTest extends TransitedEncoding_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(10);
      byteBuffer0.putShort((short)1819);
      transitedEncoding0.computeLength();
      try { 
        transitedEncoding0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.TransitedEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      byte[] byteArray0 = new byte[3];
      transitedEncoding0.setContents(byteArray0);
      int int0 = transitedEncoding0.computeLength();
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      transitedEncoding0.setContents((byte[]) null);
      byte[] byteArray0 = transitedEncoding0.getContents();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      byte[] byteArray0 = new byte[2];
      transitedEncoding0.setContents(byteArray0);
      byte[] byteArray1 = transitedEncoding0.getContents();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      // Undeclared exception!
      try { 
        transitedEncoding0.equals("TransitedEncoding : {\n    tr-type: Domain X500 compress (1)\n    contents: 0x00 0x03 0x01 0x3E \n}\n");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.directory.shared.kerberos.components.TransitedEncoding
         //
         verifyException("org.apache.directory.shared.kerberos.components.TransitedEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      TransitedEncoding transitedEncoding1 = new TransitedEncoding();
      assertTrue(transitedEncoding1.equals((Object)transitedEncoding0));
      
      TransitedEncodingType transitedEncodingType0 = TransitedEncodingType.DOMAIN_X500_COMPRESS;
      transitedEncoding1.setTrType(transitedEncodingType0);
      boolean boolean0 = transitedEncoding0.equals(transitedEncoding1);
      assertFalse(transitedEncoding1.equals((Object)transitedEncoding0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      transitedEncoding0.setContents((byte[]) null);
      TransitedEncoding transitedEncoding1 = new TransitedEncoding();
      boolean boolean0 = transitedEncoding0.equals(transitedEncoding1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      boolean boolean0 = transitedEncoding0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      boolean boolean0 = transitedEncoding0.equals(transitedEncoding0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      TransitedEncoding transitedEncoding1 = new TransitedEncoding();
      boolean boolean0 = transitedEncoding0.equals(transitedEncoding1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      transitedEncoding0.hashCode();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      try { 
        transitedEncoding0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.TransitedEncoding", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(125);
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      transitedEncoding0.encode(byteBuffer0);
      assertEquals(11, byteBuffer0.position());
      assertEquals(114, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      byte[] byteArray0 = transitedEncoding0.getContents();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      TransitedEncodingType transitedEncodingType0 = transitedEncoding0.getTrType();
      assertEquals(0, transitedEncodingType0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      String string0 = transitedEncoding0.toString();
      assertEquals("TransitedEncoding : {\n    tr-type: null (0)\n    contents: \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      TransitedEncodingType transitedEncodingType0 = TransitedEncodingType.DOMAIN_X500_COMPRESS;
      transitedEncoding0.setTrType(transitedEncodingType0);
      TransitedEncodingType transitedEncodingType1 = transitedEncoding0.getTrType();
      assertEquals(1, transitedEncodingType1.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TransitedEncoding transitedEncoding0 = new TransitedEncoding();
      transitedEncoding0.setContents((byte[]) null);
      int int0 = transitedEncoding0.computeLength();
      assertEquals(11, int0);
  }
}
