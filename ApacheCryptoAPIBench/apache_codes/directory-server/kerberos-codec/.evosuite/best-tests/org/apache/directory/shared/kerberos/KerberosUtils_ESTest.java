/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:37:30 GMT 2022
 */

package org.apache.directory.shared.kerberos;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.text.ParseException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.security.auth.kerberos.KerberosPrincipal;
import net.sf.ehcache.util.concurrent.ConcurrentHashMap;
import org.apache.directory.server.kerberos.shared.crypto.encryption.CipherTextHandler;
import org.apache.directory.server.kerberos.shared.crypto.encryption.KeyUsage;
import org.apache.directory.server.kerberos.shared.replay.ReplayCache;
import org.apache.directory.server.kerberos.shared.store.PrincipalStore;
import org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry;
import org.apache.directory.shared.kerberos.KerberosMessageType;
import org.apache.directory.shared.kerberos.KerberosUtils;
import org.apache.directory.shared.kerberos.codec.options.ApOptions;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.components.PaEncTimestamp;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.exceptions.ErrorType;
import org.apache.directory.shared.kerberos.messages.ApReq;
import org.apache.directory.shared.kerberos.messages.Ticket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KerberosUtils_ESTest extends KerberosUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Ticket ticket0 = new Ticket();
      ApReq apReq0 = new ApReq();
      ticket0.setProtocolVersionNumber(265);
      apReq0.setTicket(ticket0);
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_TGS_SESS_KEY;
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, (EncryptionKey) null, 5, (ReplayCache) null, true, inetAddress0, cipherTextHandler0, keyUsage0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Protocol version mismatch
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      ApReq apReq0 = new ApReq();
      Ticket ticket0 = new Ticket();
      apReq0.setProtocolVersionNumber(456);
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, (EncryptionKey) null, 0L, (ReplayCache) null, false, inetAddress0, cipherTextHandler0, keyUsage0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Protocol version mismatch
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      boolean boolean0 = KerberosUtils.isKerberosString(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      boolean boolean0 = KerberosUtils.isKerberosString(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      List<String> list0 = KerberosUtils.getNames("size of {}/{}/{} -> {}");
      assertEquals(3, list0.size());
      assertFalse(list0.contains("size of {}/{}/{} -> {}"));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<EncryptionType> linkedList0 = new LinkedList<EncryptionType>();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(linkedList0);
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_EXP;
      linkedHashSet0.add(encryptionType0);
      Set<EncryptionType> set0 = KerberosUtils.orderEtypesByStrength(linkedHashSet0);
      assertTrue(set0.contains(encryptionType0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>();
      String string0 = KerberosUtils.getEncryptionTypesString(linkedHashSet0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<EncryptionType> linkedList0 = new LinkedList<EncryptionType>();
      EncryptionType encryptionType0 = EncryptionType.NULL;
      linkedList0.add(encryptionType0);
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(linkedList0);
      EncryptionType encryptionType1 = KerberosUtils.getBestEncryptionType(linkedHashSet0, linkedHashSet0);
      assertEquals("null", encryptionType1.getName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD;
      linkedHashSet0.add(encryptionType0);
      EncryptionType encryptionType1 = KerberosUtils.getBestEncryptionType(linkedHashSet0, linkedHashSet0);
      assertEquals("rc4-hmac-old", encryptionType1.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      ApReq apReq0 = new ApReq();
      apReq0.setTicket(ticket0);
      ApOptions apOptions0 = new ApOptions();
      apReq0.setApOptions(apOptions0);
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.getTypeByOrdinal(0);
      EncryptionKey encryptionKey0 = new EncryptionKey();
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      encryptionKey0.setKeyType(encryptionType0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, encryptionKey0, 32, (ReplayCache) null, false, inetAddress0, cipherTextHandler0, keyUsage0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ApReq apReq0 = new ApReq();
      Ticket ticket0 = new Ticket();
      apReq0.setTicket(ticket0);
      ApOptions apOptions0 = new ApOptions((byte[]) null);
      apReq0.setApOptions(apOptions0);
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.KRB_PRIV_ENC_PART_CHOSEN_KEY;
      EncryptionKey encryptionKey0 = new EncryptionKey();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      // Undeclared exception!
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, encryptionKey0, 5, (ReplayCache) null, false, inetAddress0, cipherTextHandler0, keyUsage0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosUtils.orderEtypesByStrength((Set<EncryptionType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName();
      // Undeclared exception!
      try { 
        KerberosUtils.getKerberosPrincipal(principalName0, "-5q<X!&d6\"=A/Yss");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosUtils.getEntry((KerberosPrincipal) null, (PrincipalStore) null, (ErrorType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosUtils.getEncryptionTypesString((Set<EncryptionType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosUtils.getBestEncryptionType((Set<EncryptionType>) null, (Set<EncryptionType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosUtils.getAlgoNameFromEncType((EncryptionType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      // Undeclared exception!
      try { 
        KerberosUtils.getAlgoNameFromEncType(encryptionType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown algorithm name for the encryption type rc2CBC-EnvOID (12)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES_EDE3_CBC_ENV_OID;
      String string0 = KerberosUtils.getAlgoNameFromEncType(encryptionType0);
      assertNotNull(string0);
      assertEquals("DES", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "\\S-q";
      try { 
        KerberosUtils.getNames(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // ERR_629 A '/' at the end of a Kerberos Name is not valid.
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<String> list0 = KerberosUtils.getNames("}e85qhe$YTkuX@^o~");
      assertFalse(list0.contains("}e85qhe$YTkuX@^o~"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      boolean boolean0 = KerberosUtils.isNewEncryptionType(encryptionType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_EXP;
      boolean boolean0 = KerberosUtils.isNewEncryptionType(encryptionType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      Ticket ticket0 = new Ticket();
      ApReq apReq0 = new ApReq();
      apReq0.setTicket(ticket0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-54);
      ApOptions apOptions0 = new ApOptions(byteArray0);
      apReq0.setApOptions(apOptions0);
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      // Undeclared exception!
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, (EncryptionKey) null, 5, (ReplayCache) null, false, inetAddress0, cipherTextHandler0, keyUsage0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Ticket ticket0 = new Ticket();
      ApReq apReq0 = new ApReq();
      apReq0.setTicket(ticket0);
      byte[] byteArray0 = new byte[5];
      ApOptions apOptions0 = new ApOptions(byteArray0);
      apReq0.setApOptions(apOptions0);
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, (EncryptionKey) null, (-1L), (ReplayCache) null, true, inetAddress0, cipherTextHandler0, keyUsage0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Service key not available
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ApReq apReq0 = new ApReq();
      PaEncTimestamp paEncTimestamp0 = new PaEncTimestamp();
      Ticket ticket0 = new Ticket((-1394), (PrincipalName) null, paEncTimestamp0);
      apReq0.setTicket(ticket0);
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, ticket0, (EncryptionKey) null, 450L, (ReplayCache) null, false, inetAddress0, cipherTextHandler0, keyUsage0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Protocol version mismatch
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      KeyUsage keyUsage0 = KeyUsage.TGS_REP_ENC_PART_TGS_SESS_KEY;
      EncryptionKey encryptionKey0 = new EncryptionKey();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      ApReq apReq0 = new ApReq();
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_PRIV_PART;
      apReq0.setMessageType(kerberosMessageType0);
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, (Ticket) null, encryptionKey0, 5, (ReplayCache) null, true, inetAddress0, cipherTextHandler0, keyUsage0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid msg type
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ApReq apReq0 = new ApReq();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      CipherTextHandler cipherTextHandler0 = new CipherTextHandler();
      apReq0.setProtocolVersionNumber((-1337));
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      try { 
        KerberosUtils.verifyAuthHeader(apReq0, (Ticket) null, (EncryptionKey) null, 5, (ReplayCache) null, false, inetAddress0, cipherTextHandler0, keyUsage0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Protocol version mismatch
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PrincipalStoreEntry principalStoreEntry0 = mock(PrincipalStoreEntry.class, new ViolatedAssumptionAnswer());
      doReturn((Map<EncryptionType, EncryptionKey>) null).when(principalStoreEntry0).getKeyMap();
      PrincipalStore principalStore0 = mock(PrincipalStore.class, new ViolatedAssumptionAnswer());
      doReturn(principalStoreEntry0).when(principalStore0).getPrincipal(any(javax.security.auth.kerberos.KerberosPrincipal.class));
      ErrorType errorType0 = ErrorType.KDC_ERR_PRINCIPAL_NOT_UNIQUE;
      try { 
        KerberosUtils.getEntry((KerberosPrincipal) null, principalStore0, errorType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The client or server has a null key
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PrincipalStore principalStore0 = mock(PrincipalStore.class, new ViolatedAssumptionAnswer());
      doReturn((PrincipalStoreEntry) null).when(principalStore0).getPrincipal(any(javax.security.auth.kerberos.KerberosPrincipal.class));
      ErrorType errorType0 = ErrorType.KDC_ERR_PRINCIPAL_NOT_UNIQUE;
      try { 
        KerberosUtils.getEntry((KerberosPrincipal) null, principalStore0, errorType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Multiple principal entries in database
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal(";!r@I`=gWl9");
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      PrincipalStoreEntry principalStoreEntry0 = mock(PrincipalStoreEntry.class, new ViolatedAssumptionAnswer());
      doReturn(hashMap0, hashMap0).when(principalStoreEntry0).getKeyMap();
      PrincipalStore principalStore0 = mock(PrincipalStore.class, new ViolatedAssumptionAnswer());
      doReturn(principalStoreEntry0).when(principalStore0).getPrincipal(any(javax.security.auth.kerberos.KerberosPrincipal.class));
      ErrorType errorType0 = ErrorType.KDC_ERR_INVALID_SIG;
      try { 
        KerberosUtils.getEntry(kerberosPrincipal0, principalStore0, errorType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The client or server has a null key
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>();
      Set<EncryptionType> set0 = KerberosUtils.orderEtypesByStrength(linkedHashSet0);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Collection<EncryptionType> collection0 = EncryptionType.getEncryptionTypes();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(collection0);
      // Undeclared exception!
      try { 
        KerberosUtils.orderEtypesByStrength(linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown algorithm name for the encryption type subkey-keymaterial (65)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      boolean boolean0 = KerberosUtils.isKerberosString(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)65;
      boolean boolean0 = KerberosUtils.isKerberosString(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = KerberosUtils.isKerberosString((byte[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Collection<EncryptionType> collection0 = EncryptionType.getEncryptionTypes();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(collection0);
      String string0 = KerberosUtils.getEncryptionTypesString(linkedHashSet0);
      assertEquals("des3-cbc-sha1-kd (16), rc4-hmac (23), subkey-keymaterial (65), sha1WithRSAEncryption-CmsOID (11), des3-cbc-md5 (5), aes128-cts-hmac-sha1-96 (17), rsaES-OAEP-ENV-OID (14), rc4-hmac-exp (24), UNKNOWN (-1), aes256-cts-hmac-sha1-96 (18), null (0), des-cbc-md5 (3), [reserved] (6), md5WithRSAEncryption-CmsOID (10), des-cbc-md4 (2), dsaWithSHA1-CmsOID (9), des-ede3-cbc-Env-OID (15), des3-cbc-sha1 (7), rsaEncryption-EnvOID (13), rc4-md4 (-128), rc4-hmac-old (-133), rc2CBC-EnvOID (12), rc4-hmac-old-exp (-135), des-cbc-crc (1)", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Collection<EncryptionType> collection0 = EncryptionType.getEncryptionTypes();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(collection0);
      LinkedHashSet<EncryptionType> linkedHashSet1 = new LinkedHashSet<EncryptionType>();
      KerberosUtils.getBestEncryptionType(linkedHashSet1, linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Collection<EncryptionType> collection0 = EncryptionType.getEncryptionTypes();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(collection0);
      EncryptionType encryptionType0 = KerberosUtils.getBestEncryptionType(linkedHashSet0, linkedHashSet0);
      assertEquals("des3-cbc-sha1-kd", encryptionType0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConcurrentHashMap.KeySetView<EncryptionType, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(concurrentHashMap_KeySetView0);
      EncryptionType encryptionType0 = KerberosUtils.getBestEncryptionType(linkedHashSet0, concurrentHashMap_KeySetView0);
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal(";!r@I`=gWl9");
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      PrincipalStoreEntry principalStoreEntry0 = mock(PrincipalStoreEntry.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(principalStoreEntry0).toString();
      doReturn(hashMap0, hashMap0).when(principalStoreEntry0).getKeyMap();
      hashMap0.put(encryptionType0, (EncryptionKey) null);
      PrincipalStore principalStore0 = mock(PrincipalStore.class, new ViolatedAssumptionAnswer());
      doReturn(principalStoreEntry0).when(principalStore0).getPrincipal(any(javax.security.auth.kerberos.KerberosPrincipal.class));
      ErrorType errorType0 = ErrorType.KDC_ERR_INVALID_SIG;
      PrincipalStoreEntry principalStoreEntry1 = KerberosUtils.getEntry(kerberosPrincipal0, principalStore0, errorType0);
      assertNull(principalStoreEntry1.getSamType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName("KLR/A@", (-382));
      KerberosPrincipal kerberosPrincipal0 = KerberosUtils.getKerberosPrincipal(principalName0, ";=k[[ax7w@WMi_zC1{");
      assertNotNull(kerberosPrincipal0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_SRV_HST;
      PrincipalName principalName0 = new PrincipalName("    adData : ", principalNameType0);
      // Undeclared exception!
      try { 
        KerberosUtils.getKerberosPrincipal(principalName0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      try { 
        KerberosUtils.getNames("@#rKLDH\"+_N\"'[_|A");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // ERR_628 An empty name is not valid in a kerberos name
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      try { 
        KerberosUtils.getNames("/>");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // ERR_628 An empty name is not valid in a kerberos name
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      List<String> list0 = KerberosUtils.getNames("");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PrincipalName principalName0 = new PrincipalName((String) null, 41);
      // Undeclared exception!
      try { 
        KerberosUtils.getKerberosPrincipal(principalName0, (String) null);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // KrbException: Cannot locate default realm
         //
         verifyException("javax.security.auth.kerberos.KerberosPrincipal", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      List<String> list0 = KerberosUtils.getNames((KerberosPrincipal) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("O^6M66[l@w)'[QkG0u");
      List<String> list0 = KerberosUtils.getNames(kerberosPrincipal0);
      assertFalse(list0.contains("O^6M66[l@w)'[QkG0u"));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KerberosUtils kerberosUtils0 = new KerberosUtils();
      assertEquals((-1), KerberosUtils.NULL);
  }
}
