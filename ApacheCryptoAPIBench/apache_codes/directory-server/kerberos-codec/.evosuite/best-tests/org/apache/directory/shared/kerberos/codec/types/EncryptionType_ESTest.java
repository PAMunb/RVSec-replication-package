/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:52:20 GMT 2022
 */

package org.apache.directory.shared.kerberos.codec.types;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Collection;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncryptionType_ESTest extends EncryptionType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncryptionType[] encryptionTypeArray0 = EncryptionType.values();
      assertEquals(25, encryptionTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.valueOf("NULL");
      assertEquals(EncryptionType.NULL, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.valueOf("SHA1WITHRSAENCRYPTION_CMSOID");
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.valueOf("UNKNOWN");
      assertEquals((-1), encryptionType0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      int int0 = encryptionType0.getValue();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getTypeByValue(0);
      int int0 = encryptionType0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getTypeByValue(7);
      assertEquals(EncryptionType.DES3_CBC_SHA1, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getByName("[reserved]");
      assertEquals(EncryptionType.RESERVED6, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      String string0 = encryptionType0.getName();
      assertEquals("des3-cbc-sha1-kd", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getByName("NULL");
      assertEquals(EncryptionType.NULL, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getByName("i7l1kp|s!$:#bn");
      assertEquals(EncryptionType.UNKNOWN, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getTypeByValue((-1));
      assertEquals(EncryptionType.UNKNOWN, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getTypeByValue((-2028178999));
      assertEquals(EncryptionType.UNKNOWN, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Collection<EncryptionType> collection0 = EncryptionType.getEncryptionTypes();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.NULL;
      String string0 = encryptionType0.toString();
      assertEquals("null (0)", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.getByName((String) null);
      int int0 = encryptionType0.getValue();
      assertEquals((-1), int0);
  }
}
