/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:50:51 GMT 2022
 */

package org.apache.directory.shared.kerberos.codec.options;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.shared.kerberos.codec.options.ApOptions;
import org.apache.directory.shared.kerberos.codec.options.KdcOptions;
import org.apache.directory.shared.kerberos.codec.options.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcOptions0.clear(3787);
      assertEquals(23, KdcOptions.RESERVED_23);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcOptions0.set(4050);
      assertEquals(9, KdcOptions.RESERVED_9);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApOptions apOptions0 = new ApOptions();
      apOptions0.set(25);
      assertEquals(32, apOptions0.getIntValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions((byte[]) null);
      kdcOptions0.setBytes((byte[]) null);
      assertEquals(26, KdcOptions.DISABLE_TRANSISTED_CHECKED);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ApOptions apOptions0 = new ApOptions();
      String string0 = apOptions0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[4] = (byte) (-37);
      ApOptions apOptions0 = new ApOptions(byteArray0);
      boolean boolean0 = apOptions0.get((byte)25);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ApOptions apOptions0 = new ApOptions(byteArray0);
      boolean boolean0 = apOptions0.get((byte)7);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      // Undeclared exception!
      try { 
        kdcOptions0.match((Options) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ApOptions apOptions0 = new ApOptions(byteArray0);
      // Undeclared exception!
      try { 
        apOptions0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      String string0 = kdcOptions0.toString();
      assertEquals("DISABLE_TRANSISTED_CHECKED", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      KdcOptions kdcOptions0 = new KdcOptions(byteArray0);
      kdcOptions0.clear(0);
      assertEquals(16, KdcOptions.RESERVED_16);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcOptions0.clear((-1743));
      assertEquals(30, KdcOptions.RENEW);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcOptions0.set(0);
      assertEquals(32, kdcOptions0.getIntValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ApOptions apOptions0 = new ApOptions(byteArray0);
      apOptions0.set(0);
      assertEquals(1, ApOptions.USE_SESSION_KEY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApOptions apOptions0 = new ApOptions();
      // Undeclared exception!
      try { 
        apOptions0.match(apOptions0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      // Undeclared exception!
      try { 
        kdcOptions0.get((-1413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      boolean boolean0 = kdcOptions0.match(kdcOptions0, 27);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ApOptions apOptions0 = new ApOptions();
      apOptions0.setData((-172));
      KdcOptions kdcOptions0 = new KdcOptions();
      boolean boolean0 = apOptions0.match(kdcOptions0, 27);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      byte[] byteArray0 = kdcOptions0.getBytes();
      ApOptions apOptions0 = new ApOptions(byteArray0);
      apOptions0.clear(21);
      assertEquals(2, ApOptions.MUTUAL_REQUIRED);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ApOptions apOptions0 = new ApOptions(byteArray0);
      apOptions0.set((-1));
      assertEquals((-1), apOptions0.size());
  }
}
