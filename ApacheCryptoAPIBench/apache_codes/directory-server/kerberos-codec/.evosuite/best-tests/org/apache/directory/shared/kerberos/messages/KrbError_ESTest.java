/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:35:11 GMT 2022
 */

package org.apache.directory.shared.kerberos.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.apache.directory.shared.kerberos.KerberosMessageType;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.exceptions.ErrorType;
import org.apache.directory.shared.kerberos.messages.KrbError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KrbError_ESTest extends KrbError_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertNotNull(krbError0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("\"1k^y");
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.remaining());
      assertEquals(5, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      
      try { 
        krbError0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
      assertNotNull(krbError0);
      
      krbError0.setSusec(17);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(17, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
      
      int int0 = krbError0.getSusec();
      assertEquals(17, int0);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(17, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      krbError0.setSusec((-692));
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals((-692), krbError0.getSusec());
      assertNull(krbError0.getEText());
      
      int int0 = krbError0.getSusec();
      assertEquals((-692), int0);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals((-692), krbError0.getSusec());
      assertNull(krbError0.getEText());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      MockDate mockDate0 = new MockDate(2465L);
      assertNotNull(mockDate0);
      
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals("19700101000002Z", kerberosTime0.getDate());
      assertEquals("19700101000002Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(2000L, kerberosTime0.getTime());
      assertNotNull(kerberosTime0);
      
      krbError0.setSTime(kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertEquals("Thu Jan 01 00:00:02 GMT 1970", mockDate0.toString());
      assertEquals("19700101000002Z", kerberosTime0.getDate());
      assertEquals("19700101000002Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(2000L, kerberosTime0.getTime());
      
      KerberosTime kerberosTime1 = krbError0.getSTime();
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertEquals(2000L, kerberosTime1.getTime());
      assertFalse(kerberosTime1.isZero());
      assertEquals("19700101000002Z", kerberosTime1.getDate());
      assertEquals("19700101000002Z", kerberosTime1.toString());
      assertNotNull(kerberosTime1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
      assertNotNull(krbError0);
      
      KerberosTime kerberosTime0 = new KerberosTime((-2852));
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertNotNull(kerberosTime0);
      
      krbError0.setSTime(kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals((-2000L), kerberosTime0.getTime());
      
      KerberosTime kerberosTime1 = krbError0.getSTime();
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
      assertFalse(kerberosTime1.isZero());
      assertEquals((-2000L), kerberosTime1.getTime());
      assertEquals("19691231235957Z", kerberosTime1.getDate());
      assertEquals("19691231235957Z", kerberosTime1.toString());
      assertNotNull(kerberosTime1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getCusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getRealm());
      assertNotNull(krbError0);
      
      String[] stringArray0 = new String[4];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 0);
      assertEquals(4, stringArray0.length);
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNull(principalName0.getRealm());
      assertNotNull(principalName0);
      
      krbError0.setSName(principalName0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, krbError0.getCusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNull(principalName0.getRealm());
      
      PrincipalName principalName1 = krbError0.getSName();
      assertSame(principalName1, principalName0);
      assertEquals(0, krbError0.getCusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getRealm());
      assertNull(principalName1.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName1.getNameType());
      assertNotNull(principalName1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNotNull(krbError0);
      
      krbError0.setRealm("    cTime: ");
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals("    cTime: ", krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      
      String string0 = krbError0.getRealm();
      assertEquals("    cTime: ", string0);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals("    cTime: ", krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getSusec());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNotNull(krbError0);
      
      krbError0.setRealm("");
      assertEquals(0, krbError0.getSusec());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals("", krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      
      String string0 = krbError0.getRealm();
      assertEquals("", string0);
      assertEquals(0, krbError0.getSusec());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals("", krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNotNull(krbError0);
      
      ErrorType errorType0 = ErrorType.KDC_ERR_NONE;
      assertEquals(0, errorType0.getValue());
      assertEquals("No error", errorType0.toString());
      assertEquals("No error", errorType0.getMessage());
      assertNotNull(errorType0);
      
      krbError0.setErrorCode(errorType0);
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals(0, errorType0.getValue());
      assertEquals("No error", errorType0.toString());
      assertEquals("No error", errorType0.getMessage());
      
      ErrorType errorType1 = krbError0.getErrorCode();
      assertSame(errorType1, errorType0);
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals("No error", errorType1.getMessage());
      assertEquals(0, errorType1.getValue());
      assertEquals("No error", errorType1.toString());
      assertNotNull(errorType1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertNotNull(krbError0);
      
      ErrorType errorType0 = ErrorType.KDC_ERR_POLICY;
      assertEquals("KDC policy rejects request", errorType0.getMessage());
      assertEquals(12, errorType0.getValue());
      assertEquals("KDC policy rejects request", errorType0.toString());
      assertNotNull(errorType0);
      
      krbError0.setErrorCode(errorType0);
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals("KDC policy rejects request", errorType0.getMessage());
      assertEquals(12, errorType0.getValue());
      assertEquals("KDC policy rejects request", errorType0.toString());
      
      ErrorType errorType1 = krbError0.getErrorCode();
      assertSame(errorType1, errorType0);
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals("KDC policy rejects request", errorType1.getMessage());
      assertEquals("KDC policy rejects request", errorType1.toString());
      assertEquals(12, errorType1.getValue());
      assertNotNull(errorType1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      krbError0.setEText("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n");
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n", krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      
      String string0 = krbError0.getEText();
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n", string0);
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n", krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getCusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNotNull(krbError0);
      
      krbError0.setEText("");
      assertEquals(0, krbError0.getCusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals("", krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      
      String string0 = krbError0.getEText();
      assertEquals("", string0);
      assertEquals(0, krbError0.getCusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals("", krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(krbError0);
      
      byte[] byteArray0 = new byte[1];
      krbError0.setEData(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      
      byte[] byteArray1 = krbError0.getEData();
      assertSame(byteArray1, byteArray0);
      assertEquals(1, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getSusec());
      assertEquals(0, krbError0.getCusec());
      assertNotNull(krbError0);
      
      krbError0.setCusec((-1));
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getSusec());
      assertEquals((-1), krbError0.getCusec());
      
      int int0 = krbError0.getCusec();
      assertEquals((-1), int0);
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getSusec());
      assertEquals((-1), krbError0.getCusec());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(krbError0);
      
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertTrue(kerberosTime0.isZero());
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertNotNull(kerberosTime0);
      
      krbError0.setCTime(kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertTrue(kerberosTime0.isZero());
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      
      KerberosTime kerberosTime1 = krbError0.getCTime();
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
      assertEquals(0L, kerberosTime1.getTime());
      assertTrue(kerberosTime1.isZero());
      assertNotNull(kerberosTime1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(krbError0);
      
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertNotNull(kerberosTime0);
      
      krbError0.setCTime(kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      
      KerberosTime kerberosTime1 = krbError0.getCTime();
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(9223372036854775000L, kerberosTime1.getTime());
      assertFalse(kerberosTime1.isZero());
      assertEquals("2922789940817071255Z", kerberosTime1.getDate());
      assertEquals("2922789940817071255Z", kerberosTime1.toString());
      assertNotNull(kerberosTime1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-1276L));
      KrbError krbError0 = new KrbError();
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertFalse(kerberosTime0.isZero());
      assertEquals((-1000L), kerberosTime0.getTime());
      assertEquals("19691231235959Z", kerberosTime0.getDate());
      assertEquals("19691231235959Z", kerberosTime0.toString());
      assertNotNull(kerberosTime0);
      
      krbError0.setCTime(kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertFalse(kerberosTime0.isZero());
      assertEquals((-1000L), kerberosTime0.getTime());
      assertEquals("19691231235959Z", kerberosTime0.getDate());
      assertEquals("19691231235959Z", kerberosTime0.toString());
      
      KerberosTime kerberosTime1 = krbError0.getCTime();
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals("19691231235959Z", kerberosTime1.getDate());
      assertEquals("19691231235959Z", kerberosTime1.toString());
      assertFalse(kerberosTime1.isZero());
      assertEquals((-1000L), kerberosTime1.getTime());
      assertNotNull(kerberosTime1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNotNull(krbError0);
      
      krbError0.setCRealm("J:v-IBVmIFY");
      assertEquals("J:v-IBVmIFY", krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      
      String string0 = krbError0.getCRealm();
      assertEquals("J:v-IBVmIFY", string0);
      assertEquals("J:v-IBVmIFY", krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getEText());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      krbError0.setCRealm("");
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertEquals("", krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      
      String string0 = krbError0.getCRealm();
      assertEquals("", string0);
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertEquals("", krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(krbError0);
      
      PrincipalName principalName0 = new PrincipalName("E79D`[$G", (-92));
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      assertNotNull(principalName0);
      
      krbError0.setCName(principalName0);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(principalName0.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName0.getNameType());
      
      PrincipalName principalName1 = krbError0.getCName();
      assertSame(principalName1, principalName0);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(principalName1.getRealm());
      assertEquals(PrincipalNameType.KRB_NT_UNKNOWN, principalName1.getNameType());
      assertNotNull(principalName1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNotNull(krbError0);
      
      PrincipalName principalName0 = new PrincipalName();
      assertNull(principalName0.getNameType());
      assertNull(principalName0.getRealm());
      assertNotNull(principalName0);
      
      krbError0.setCName(principalName0);
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(principalName0.getNameType());
      assertNull(principalName0.getRealm());
      
      // Undeclared exception!
      try { 
        krbError0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getEText());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(17);
      assertEquals(17, byteBuffer0.limit());
      assertEquals(17, byteBuffer0.remaining());
      assertEquals(17, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=17 cap=17]", byteBuffer0.toString());
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      assertEquals(17, byteBuffer0.limit());
      assertEquals(17, byteBuffer0.remaining());
      assertEquals(17, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=17 cap=17]", byteBuffer0.toString());
      assertEquals(17, byteBuffer1.remaining());
      assertEquals(17, byteBuffer1.capacity());
      assertEquals(17, byteBuffer1.limit());
      assertFalse(byteBuffer1.isDirect());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=17 cap=17]", byteBuffer1.toString());
      assertFalse(byteBuffer1.hasArray());
      assertTrue(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.position());
      assertNotNull(byteBuffer1);
      
      // Undeclared exception!
      try { 
        krbError0.encode(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNotNull(krbError0);
      
      byte[] byteArray0 = new byte[33];
      krbError0.setEData(byteArray0);
      assertEquals(33, byteArray0.length);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      
      String string0 = krbError0.toString();
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n    eData: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 \n}\n", string0);
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(krbError0);
      
      krbError0.setEText("J:v-IBVmIFY");
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertEquals("J:v-IBVmIFY", krbError0.getEText());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      
      String string0 = krbError0.toString();
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n    eText: J:v-IBVmIFY\n}\n", string0);
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertEquals("J:v-IBVmIFY", krbError0.getEText());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getCRealm());
      assertNotNull(krbError0);
      
      krbError0.setCRealm("J:v-IBVmIFY");
      assertEquals(0, krbError0.getSusec());
      assertEquals("J:v-IBVmIFY", krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getCusec());
      
      String string0 = krbError0.toString();
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    cRealm: J:v-IBVmIFY\n    realm: null\n    sName: null\n}\n", string0);
      assertEquals(0, krbError0.getSusec());
      assertEquals("J:v-IBVmIFY", krbError0.getCRealm());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getCusec());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getCusec());
      assertNull(krbError0.getEText());
      assertNotNull(krbError0);
      
      krbError0.setCusec((-96));
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals((-96), krbError0.getCusec());
      assertNull(krbError0.getEText());
      
      String string0 = krbError0.toString();
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    cusec: -96\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n", string0);
      assertEquals(0, krbError0.getSusec());
      assertNull(krbError0.getCRealm());
      assertNull(krbError0.getRealm());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals((-96), krbError0.getCusec());
      assertNull(krbError0.getEText());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(krbError0);
      
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertNotNull(kerberosTime0);
      
      krbError0.setCTime(kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      
      String string0 = krbError0.toString();
      assertEquals("\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    cTime: 2922789940817071255Z\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n", string0);
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getEText());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertEquals(0, krbError0.getSusec());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(222);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(222, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=222 cap=222]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(222, byteBuffer0.remaining());
      assertEquals(222, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      KrbError krbError0 = new KrbError();
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      assertEquals(0, krbError0.getCusec());
      assertNotNull(krbError0);
      
      krbError0.setCusec(222);
      assertEquals(222, krbError0.getCusec());
      assertEquals(KerberosMessageType.KRB_ERROR, krbError0.getMessageType());
      assertNull(krbError0.getEText());
      assertEquals(0, krbError0.getSusec());
      assertEquals(5, krbError0.getProtocolVersionNumber());
      assertNull(krbError0.getRealm());
      assertNull(krbError0.getCRealm());
      
      // Undeclared exception!
      try { 
        krbError0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      String[] stringArray0 = new String[4];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 0);
      krbError0.setSName(principalName0);
      ErrorType errorType0 = ErrorType.KDC_ERR_POLICY;
      krbError0.setErrorCode(errorType0);
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbError0.setCTime(kerberosTime0);
      krbError0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      // Undeclared exception!
      try { 
        krbError0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      try { 
        krbError0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      byte[] byteArray0 = new byte[33];
      krbError0.setEData(byteArray0);
      PrincipalName principalName0 = new PrincipalName("E79D`[$G", (-92));
      krbError0.setSName(principalName0);
      ErrorType errorType0 = ErrorType.KRB_AP_ERR_BADDIRECTION;
      krbError0.setErrorCode(errorType0);
      int int0 = krbError0.computeLength();
      assertEquals(108, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      String[] stringArray0 = new String[4];
      PrincipalName principalName0 = new PrincipalName(stringArray0, (-1065));
      krbError0.setSName(principalName0);
      ErrorType errorType0 = ErrorType.KDC_ERR_POLICY;
      krbError0.setErrorCode(errorType0);
      krbError0.setEText("J:v-IBVmIFY");
      int int0 = krbError0.computeLength();
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      PrincipalName principalName0 = new PrincipalName("E79D`[$G", (-92));
      krbError0.setCName(principalName0);
      ErrorType errorType0 = ErrorType.KRB_AP_ERR_BADDIRECTION;
      krbError0.setErrorCode(errorType0);
      // Undeclared exception!
      try { 
        krbError0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      krbError0.setCusec(17);
      // Undeclared exception!
      try { 
        krbError0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      int int0 = krbError0.getCusec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      krbError0.setCusec(545);
      int int0 = krbError0.getCusec();
      assertEquals(545, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      String string0 = krbError0.getEText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      ErrorType errorType0 = krbError0.getErrorCode();
      assertNull(errorType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      String string0 = krbError0.getRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      krbError0.setCRealm("J:v-IBVmIFY");
      ErrorType errorType0 = ErrorType.KDC_ERR_POLICY;
      krbError0.setErrorCode(errorType0);
      // Undeclared exception!
      try { 
        krbError0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      PrincipalName principalName0 = krbError0.getSName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      int int0 = krbError0.getSusec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      KerberosTime kerberosTime0 = krbError0.getSTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      byte[] byteArray0 = krbError0.getEData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      ErrorType errorType0 = ErrorType.KDC_ERR_BAD_PVNO;
      krbError0.setErrorCode(errorType0);
      KerberosTime kerberosTime0 = new KerberosTime();
      krbError0.setSTime(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(604800000);
      // Undeclared exception!
      try { 
        krbError0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.messages.KrbError", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      byte[] byteArray0 = new byte[0];
      krbError0.setEData(byteArray0);
      byte[] byteArray1 = krbError0.getEData();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      KerberosTime kerberosTime0 = krbError0.getCTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      String string0 = krbError0.getCRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      KerberosTime kerberosTime0 = new KerberosTime(613);
      krbError0.setSTime(kerberosTime0);
      KerberosTime kerberosTime1 = krbError0.getSTime();
      assertEquals(0L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      PrincipalName principalName0 = krbError0.getCName();
      assertNull(principalName0);
  }
}
