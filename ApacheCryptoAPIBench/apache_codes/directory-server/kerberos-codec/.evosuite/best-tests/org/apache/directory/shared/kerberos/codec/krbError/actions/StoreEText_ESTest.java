/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:17:55 GMT 2022
 */

package org.apache.directory.shared.kerberos.codec.krbError.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.api.asn1.ber.tlv.BerValue;
import org.apache.directory.api.asn1.ber.tlv.TLV;
import org.apache.directory.shared.kerberos.codec.krbError.KrbErrorContainer;
import org.apache.directory.shared.kerberos.codec.krbError.actions.StoreEText;
import org.apache.directory.shared.kerberos.messages.KrbError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StoreEText_ESTest extends StoreEText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StoreEText storeEText0 = new StoreEText();
      TLV tLV0 = mock(TLV.class, new ViolatedAssumptionAnswer());
      doReturn((-420)).when(tLV0).getLength();
      doReturn((BerValue) null).when(tLV0).getValue();
      KrbErrorContainer krbErrorContainer0 = mock(KrbErrorContainer.class, new ViolatedAssumptionAnswer());
      doReturn(tLV0).when(krbErrorContainer0).getCurrentTLV();
      // Undeclared exception!
      try { 
        storeEText0.action(krbErrorContainer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.krbError.actions.StoreEText", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StoreEText storeEText0 = new StoreEText();
      TLV tLV0 = mock(TLV.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tLV0).getLength();
      KrbErrorContainer krbErrorContainer0 = mock(KrbErrorContainer.class, new ViolatedAssumptionAnswer());
      doReturn(tLV0).when(krbErrorContainer0).getCurrentTLV();
      try { 
        storeEText0.action(krbErrorContainer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_04067 The LdapMessage should not be empty
         //
         verifyException("org.apache.directory.shared.kerberos.codec.krbError.actions.StoreEText", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StoreEText storeEText0 = new StoreEText();
      byte[] byteArray0 = new byte[1];
      BerValue berValue0 = mock(BerValue.class, new ViolatedAssumptionAnswer());
      doReturn(byteArray0).when(berValue0).getData();
      TLV tLV0 = mock(TLV.class, new ViolatedAssumptionAnswer());
      doReturn(1130).when(tLV0).getLength();
      doReturn(berValue0).when(tLV0).getValue();
      KrbError krbError0 = mock(KrbError.class, new ViolatedAssumptionAnswer());
      KrbErrorContainer krbErrorContainer0 = mock(KrbErrorContainer.class, new ViolatedAssumptionAnswer());
      doReturn(tLV0).when(krbErrorContainer0).getCurrentTLV();
      doReturn(krbError0).when(krbErrorContainer0).getKrbError();
      storeEText0.action(krbErrorContainer0);
      assertEquals("KRB-ERROR etext", storeEText0.toString());
  }
}
