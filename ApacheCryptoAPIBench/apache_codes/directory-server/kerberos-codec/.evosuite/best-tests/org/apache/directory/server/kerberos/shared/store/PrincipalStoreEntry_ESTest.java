/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:31:31 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.store;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import javax.security.auth.kerberos.KerberosPrincipal;
import org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.SamType;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrincipalStoreEntry_ESTest extends PrincipalStoreEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "", "", kerberosPrincipal0, 86, kerberosTime0, kerberosTime0, kerberosTime0, (-1), (-1519), (-1519), hashMap0, "~&3@Z_f,{LCi+", samType0, true, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(86, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals((-1519), principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
      
      boolean boolean0 = principalStoreEntry0.isLockedOut();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertTrue(boolean0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(86, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals((-1519), principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "E~8`B%X", "C'5&S\"fjV", (KerberosPrincipal) null, 604800000, kerberosTime0, kerberosTime0, kerberosTime0, (-1539), 604800000, 0, hashMap0, "", samType0, true, true, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("C'5&S\"fjV", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("E~8`B%X", principalStoreEntry0.getCommonName());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals((-1539), principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      
      boolean boolean0 = principalStoreEntry0.isDisabled();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertTrue(boolean0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("C'5&S\"fjV", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("E~8`B%X", principalStoreEntry0.getCommonName());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals((-1539), principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "", (KerberosPrincipal) null, 0, (KerberosTime) null, (KerberosTime) null, (KerberosTime) null, 0, 0, (-2366), hashMap0, "E$\"", samType0, true, false, (KerberosTime) null);
      assertNotNull(principalStoreEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("E$\"", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-2366), principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      
      KerberosTime kerberosTime0 = principalStoreEntry0.getValidStart();
      assertNull(kerberosTime0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("E$\"", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-2366), principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, 60000, kerberosTime0, kerberosTime0, kerberosTime0, 60000, 604800000, 60000, hashMap0, "~&3@Z_f,{LCi+", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getValidStart();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime1);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(1392409281000L, kerberosTime1.getTime());
      assertEquals("20140214202121Z", kerberosTime1.getDate());
      assertEquals("20140214202121Z", kerberosTime1.toString());
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      KerberosTime kerberosTime1 = new KerberosTime((-1984L));
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime1);
      assertFalse(kerberosTime1.isZero());
      assertEquals("19691231235958Z", kerberosTime1.getDate());
      assertEquals("19691231235958Z", kerberosTime1.toString());
      assertEquals((-1000L), kerberosTime1.getTime());
      
      SamType samType0 = SamType.PA_SAM_TYPE_ENIGMA;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("loy0#/bo2FQ@", "sc,^geH.&^HjM|z0z$", "sc,^geH.&^HjM|z0z$", kerberosPrincipal0, 156, kerberosTime1, kerberosTime1, kerberosTime1, 60000, 60000, (-20), hashMap0, "", samType0, false, false, kerberosTime0);
      assertFalse(kerberosTime0.equals((Object)kerberosTime1));
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(kerberosTime1.isZero());
      assertEquals("19691231235958Z", kerberosTime1.getDate());
      assertEquals("19691231235958Z", kerberosTime1.toString());
      assertEquals((-1000L), kerberosTime1.getTime());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals("sc,^geH.&^HjM|z0z$", principalStoreEntry0.getCommonName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("sc,^geH.&^HjM|z0z$", principalStoreEntry0.getUserId());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_ENIGMA, principalStoreEntry0.getSamType());
      assertEquals((-20), principalStoreEntry0.getKDCFlags());
      assertEquals("loy0#/bo2FQ@", principalStoreEntry0.getDistinguishedName());
      assertEquals(156, principalStoreEntry0.getKeyVersionNumber());
      
      KerberosTime kerberosTime2 = principalStoreEntry0.getValidStart();
      assertNotSame(kerberosTime0, kerberosTime2);
      assertNotSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime2);
      assertNotSame(kerberosTime1, kerberosTime0);
      assertNotSame(kerberosTime2, kerberosTime0);
      assertSame(kerberosTime2, kerberosTime1);
      assertFalse(kerberosTime0.equals((Object)kerberosTime1));
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertFalse(kerberosTime2.equals((Object)kerberosTime0));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime2);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(kerberosTime1.isZero());
      assertEquals("19691231235958Z", kerberosTime1.getDate());
      assertEquals("19691231235958Z", kerberosTime1.toString());
      assertEquals((-1000L), kerberosTime1.getTime());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals("sc,^geH.&^HjM|z0z$", principalStoreEntry0.getCommonName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("sc,^geH.&^HjM|z0z$", principalStoreEntry0.getUserId());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_ENIGMA, principalStoreEntry0.getSamType());
      assertEquals((-20), principalStoreEntry0.getKDCFlags());
      assertEquals("loy0#/bo2FQ@", principalStoreEntry0.getDistinguishedName());
      assertEquals(156, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(kerberosTime2.isZero());
      assertEquals("19691231235958Z", kerberosTime2.getDate());
      assertEquals("19691231235958Z", kerberosTime2.toString());
      assertEquals((-1000L), kerberosTime2.getTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("f&", (String) null, "NQrz4wA3*1(pI>Y ", (KerberosPrincipal) null, 2572, kerberosTime0, (KerberosTime) null, kerberosTime0, (-552), (-1641), 0, hashMap0, "f&", samType0, true, true, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      assertEquals("f&", principalStoreEntry0.getRealmName());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals((-552), principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1641), principalStoreEntry0.getMaxRenew());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getValidEnd();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(kerberosTime1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      assertEquals("f&", principalStoreEntry0.getRealmName());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals((-552), principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1641), principalStoreEntry0.getMaxRenew());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      KerberosTime kerberosTime1 = new KerberosTime(0L);
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime1);
      assertTrue(kerberosTime1.isZero());
      assertEquals(0L, kerberosTime1.getTime());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry((String) null, "CRYPTOCard", "", (KerberosPrincipal) null, 604800000, kerberosTime1, kerberosTime1, kerberosTime0, 275, 86400000, 60000, hashMap0, "5c)85", samType0, false, false, kerberosTime1);
      assertFalse(kerberosTime0.equals((Object)kerberosTime1));
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(kerberosTime1.isZero());
      assertEquals(0L, kerberosTime1.getTime());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
      assertEquals("5c)85", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertEquals("CRYPTOCard", principalStoreEntry0.getCommonName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(275, principalStoreEntry0.getMaxLife());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      
      KerberosTime kerberosTime2 = principalStoreEntry0.getValidEnd();
      assertNotSame(kerberosTime0, kerberosTime1);
      assertNotSame(kerberosTime0, kerberosTime2);
      assertSame(kerberosTime1, kerberosTime2);
      assertNotSame(kerberosTime1, kerberosTime0);
      assertSame(kerberosTime2, kerberosTime1);
      assertNotSame(kerberosTime2, kerberosTime0);
      assertFalse(kerberosTime0.equals((Object)kerberosTime1));
      assertFalse(kerberosTime1.equals((Object)kerberosTime0));
      assertFalse(kerberosTime2.equals((Object)kerberosTime0));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime2);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(kerberosTime1.isZero());
      assertEquals(0L, kerberosTime1.getTime());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
      assertEquals("5c)85", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertEquals("CRYPTOCard", principalStoreEntry0.getCommonName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(275, principalStoreEntry0.getMaxLife());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals(0L, kerberosTime2.getTime());
      assertTrue(kerberosTime2.isZero());
      assertEquals("19700101000000Z", kerberosTime2.getDate());
      assertEquals("19700101000000Z", kerberosTime2.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      KerberosTime kerberosTime0 = new KerberosTime((-1424L));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235958Z", kerberosTime0.getDate());
      assertEquals("19691231235958Z", kerberosTime0.toString());
      assertEquals((-1000L), kerberosTime0.getTime());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("f&", (String) null, "NQrz4wA3*1(pI>Y ", (KerberosPrincipal) null, 2572, kerberosTime0, kerberosTime0, kerberosTime0, (-1), 35, 2572, hashMap0, "", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235958Z", kerberosTime0.getDate());
      assertEquals("19691231235958Z", kerberosTime0.toString());
      assertEquals((-1000L), kerberosTime0.getTime());
      assertEquals(35, principalStoreEntry0.getMaxRenew());
      assertEquals(2572, principalStoreEntry0.getKDCFlags());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getValidEnd();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235958Z", kerberosTime0.getDate());
      assertEquals("19691231235958Z", kerberosTime0.toString());
      assertEquals((-1000L), kerberosTime0.getTime());
      assertEquals(35, principalStoreEntry0.getMaxRenew());
      assertEquals(2572, principalStoreEntry0.getKDCFlags());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertFalse(kerberosTime1.isZero());
      assertEquals("19691231235958Z", kerberosTime1.getDate());
      assertEquals("19691231235958Z", kerberosTime1.toString());
      assertEquals((-1000L), kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry((String) null, "Nw+1#fvL6d{Z", (String) null, (KerberosPrincipal) null, 804, kerberosTime0, kerberosTime0, kerberosTime0, 60000, 0, 86400000, hashMap0, (String) null, samType0, false, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(804, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getRealmName());
      
      String string0 = principalStoreEntry0.getUserId();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(804, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getRealmName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SECURID;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("d[Y=QKk4Uz%w", "", "", (KerberosPrincipal) null, 60000, kerberosTime0, kerberosTime0, kerberosTime0, 62, 60000, (-1553), (Map<EncryptionType, EncryptionKey>) null, "", samType0, false, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getDistinguishedName());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1553), principalStoreEntry0.getKDCFlags());
      assertEquals(62, principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      
      String string0 = principalStoreEntry0.getUserId();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getDistinguishedName());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1553), principalStoreEntry0.getKDCFlags());
      assertEquals(62, principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry((String) null, "Nw+1#fvL6d{Z", (String) null, (KerberosPrincipal) null, 804, kerberosTime0, kerberosTime0, kerberosTime0, 60000, 0, 86400000, hashMap0, (String) null, samType0, false, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertNull(principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getRealmName());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(804, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      
      String string0 = principalStoreEntry0.getRealmName();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertNull(principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getRealmName());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(804, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SKEY;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "", (KerberosPrincipal) null, 0, kerberosTime0, kerberosTime0, kerberosTime0, 877, 97, (-2518), hashMap0, "Nw+1#fvL6d{Z", samType0, true, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(877, principalStoreEntry0.getMaxLife());
      assertEquals(97, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-2518), principalStoreEntry0.getKDCFlags());
      
      String string0 = principalStoreEntry0.getRealmName();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals("Nw+1#fvL6d{Z", string0);
      assertNotNull(string0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(877, principalStoreEntry0.getMaxLife());
      assertEquals(97, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-2518), principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SKEY;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "", (KerberosPrincipal) null, 0, kerberosTime0, kerberosTime0, kerberosTime0, 877, 97, (-2518), hashMap0, "Nw+1#fvL6d{Z", samType0, true, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals((-2518), principalStoreEntry0.getKDCFlags());
      assertEquals(877, principalStoreEntry0.getMaxLife());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(97, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      
      KerberosPrincipal kerberosPrincipal0 = principalStoreEntry0.getPrincipal();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNull(kerberosPrincipal0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals((-2518), principalStoreEntry0.getKDCFlags());
      assertEquals(877, principalStoreEntry0.getMaxLife());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(97, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("*Vc8{Ym&3gzr.", "", "9K$*Gt4c$Cl|/)DS", (KerberosPrincipal) null, 120, (KerberosTime) null, (KerberosTime) null, (KerberosTime) null, 918, 0, (-984), hashMap0, "", samType0, true, true, (KerberosTime) null);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(120, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("9K$*Gt4c$Cl|/)DS", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-984), principalStoreEntry0.getKDCFlags());
      assertEquals(918, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("*Vc8{Ym&3gzr.", principalStoreEntry0.getDistinguishedName());
      
      KerberosTime kerberosTime0 = principalStoreEntry0.getPasswordEnd();
      assertNull(kerberosTime0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(120, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("9K$*Gt4c$Cl|/)DS", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-984), principalStoreEntry0.getKDCFlags());
      assertEquals(918, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("*Vc8{Ym&3gzr.", principalStoreEntry0.getDistinguishedName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertTrue(kerberosTime0.isZero());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("D", "H.dBg]K", "4V_rU", (KerberosPrincipal) null, 909, kerberosTime0, kerberosTime0, kerberosTime0, 0, 86400000, 60000, hashMap0, "hT?", samType0, false, false, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertTrue(kerberosTime0.isZero());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(principalStoreEntry0.isDisabled());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getPasswordEnd();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime1);
      assertTrue(kerberosTime0.isZero());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(principalStoreEntry0.isDisabled());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(0L, kerberosTime1.getTime());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
      assertTrue(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, (-1), kerberosTime0, kerberosTime0, kerberosTime0, (-1), 604800000, (-1), hashMap0, "~&3@Z_f,{LCi+", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals((-1), principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getPasswordEnd();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime1);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals((-1), principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertFalse(kerberosTime1.isZero());
      assertEquals("20140214202121Z", kerberosTime1.getDate());
      assertEquals("20140214202121Z", kerberosTime1.toString());
      assertEquals(1392409281000L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, 86400000, kerberosTime0, kerberosTime0, kerberosTime0, (-1), 604800000, 86400000, hashMap0, "~&3@Z_f,{LCi+", samType0, true, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      
      int int0 = principalStoreEntry0.getMaxRenew();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(604800000, int0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("f&", (String) null, "NQrz4wA3*1(pI>Y ", (KerberosPrincipal) null, 2572, kerberosTime0, (KerberosTime) null, kerberosTime0, (-552), (-1641), 0, hashMap0, "f&", samType0, true, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals("f&", principalStoreEntry0.getRealmName());
      assertEquals((-552), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals((-1641), principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isDisabled());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      
      int int0 = principalStoreEntry0.getMaxRenew();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals((-1641), int0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals("f&", principalStoreEntry0.getRealmName());
      assertEquals((-552), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals((-1641), principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isDisabled());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_ENIGMA;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", kerberosPrincipal0, 86400000, kerberosTime0, kerberosTime0, kerberosTime0, 86400000, 60000, 604800000, hashMap0, "org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getMaxLife());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_ENIGMA, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      
      int int0 = principalStoreEntry0.getMaxLife();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, int0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getMaxLife());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_ENIGMA, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "", "", kerberosPrincipal0, 86, kerberosTime0, kerberosTime0, kerberosTime0, (-1), (-1519), (-1519), hashMap0, "~&3@Z_f,{LCi+", samType0, true, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals((-1519), principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(86, principalStoreEntry0.getKeyVersionNumber());
      
      int int0 = principalStoreEntry0.getMaxLife();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals((-1), int0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals((-1519), principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(86, principalStoreEntry0.getKeyVersionNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "d[Y=QKk4Uz%w", "", (KerberosPrincipal) null, 3778, kerberosTime0, kerberosTime0, kerberosTime0, (-2366), 0, 60000, hashMap0, "6rRSy[q{L94D'hjF", samType0, false, false, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getCommonName());
      assertEquals("6rRSy[q{L94D'hjF", principalStoreEntry0.getRealmName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(3778, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-2366), principalStoreEntry0.getMaxLife());
      
      int int0 = principalStoreEntry0.getKeyVersionNumber();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(3778, int0);
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getCommonName());
      assertEquals("6rRSy[q{L94D'hjF", principalStoreEntry0.getRealmName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(3778, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-2366), principalStoreEntry0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("\"''", "\"''", "\"''", kerberosPrincipal0, (-1519), kerberosTime0, kerberosTime0, kerberosTime0, (-1), 604800000, (-1519), hashMap0, "\"''", samType0, true, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("\"''", principalStoreEntry0.getDistinguishedName());
      assertEquals("\"''", principalStoreEntry0.getCommonName());
      assertEquals((-1519), principalStoreEntry0.getKeyVersionNumber());
      assertEquals("\"''", principalStoreEntry0.getUserId());
      assertEquals("\"''", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      
      int int0 = principalStoreEntry0.getKeyVersionNumber();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals((-1519), int0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("\"''", principalStoreEntry0.getDistinguishedName());
      assertEquals("\"''", principalStoreEntry0.getCommonName());
      assertEquals((-1519), principalStoreEntry0.getKeyVersionNumber());
      assertEquals("\"''", principalStoreEntry0.getUserId());
      assertEquals("\"''", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SECURID;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("d[Y=QKk4Uz%w", "", "", (KerberosPrincipal) null, 60000, kerberosTime0, kerberosTime0, kerberosTime0, 62, 60000, (-1553), (Map<EncryptionType, EncryptionKey>) null, "", samType0, false, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals((-1553), principalStoreEntry0.getKDCFlags());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getDistinguishedName());
      assertEquals(62, principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      
      Map<EncryptionType, EncryptionKey> map0 = principalStoreEntry0.getKeyMap();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(map0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals((-1553), principalStoreEntry0.getKDCFlags());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getDistinguishedName());
      assertEquals(62, principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("D", "H.dBg]K", "4V_rU", (KerberosPrincipal) null, 909, kerberosTime0, kerberosTime0, kerberosTime0, 0, 86400000, 60000, hashMap0, "hT?", samType0, false, false, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD5;
      EncryptionKey encryptionKey0 = new EncryptionKey();
      assertNotNull(encryptionKey0);
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertNull(encryptionKey0.getKeyType());
      
      EncryptionKey encryptionKey1 = hashMap0.put(encryptionType0, encryptionKey0);
      assertNull(encryptionKey1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertNull(encryptionKey0.getKeyType());
      
      Map<EncryptionType, EncryptionKey> map0 = principalStoreEntry0.getKeyMap();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(map0);
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SECURID;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("_", "_", (String) null, kerberosPrincipal0, (-1), kerberosTime0, kerberosTime0, kerberosTime0, (-1075), (byte)0, (byte)0, hashMap0, "", samType0, false, true, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("_", principalStoreEntry0.getCommonName());
      assertNull(principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      assertEquals("_", principalStoreEntry0.getDistinguishedName());
      assertEquals((-1), principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1075), principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isLockedOut());
      
      int int0 = principalStoreEntry0.getKDCFlags();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(0, int0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("_", principalStoreEntry0.getCommonName());
      assertNull(principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      assertEquals("_", principalStoreEntry0.getDistinguishedName());
      assertEquals((-1), principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1075), principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertTrue(principalStoreEntry0.isLockedOut());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SKEY;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "", (KerberosPrincipal) null, (-3232), kerberosTime0, kerberosTime0, kerberosTime0, 604800000, 60000, (-1), hashMap0, "", samType0, true, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals((-3232), principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      
      int int0 = principalStoreEntry0.getKDCFlags();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals((-1), int0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals((-3232), principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("'\n", "1WhE6|CW{-`GuSW^", "'\n", (KerberosPrincipal) null, 1100, kerberosTime0, (KerberosTime) null, kerberosTime0, 1395, (-1), (-1), hashMap0, "", samType0, false, false, (KerberosTime) null);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-1), principalStoreEntry0.getMaxRenew());
      assertEquals(1100, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("1WhE6|CW{-`GuSW^", principalStoreEntry0.getCommonName());
      assertEquals("'\n", principalStoreEntry0.getUserId());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("'\n", principalStoreEntry0.getDistinguishedName());
      assertEquals(1395, principalStoreEntry0.getMaxLife());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getExpiration();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(kerberosTime1);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-1), principalStoreEntry0.getMaxRenew());
      assertEquals(1100, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("1WhE6|CW{-`GuSW^", principalStoreEntry0.getCommonName());
      assertEquals("'\n", principalStoreEntry0.getUserId());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("'\n", principalStoreEntry0.getDistinguishedName());
      assertEquals(1395, principalStoreEntry0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("D", "H.dBg]K", "4V_rU", (KerberosPrincipal) null, 909, kerberosTime0, kerberosTime0, kerberosTime0, 0, 86400000, 60000, hashMap0, "hT?", samType0, false, false, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getExpiration();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime1);
      assertEquals(0L, kerberosTime0.getTime());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals(0L, kerberosTime1.getTime());
      assertTrue(kerberosTime1.isZero());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      KerberosTime kerberosTime0 = new KerberosTime((-1424L));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals((-1000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235958Z", kerberosTime0.getDate());
      assertEquals("19691231235958Z", kerberosTime0.toString());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("f&", (String) null, "NQrz4wA3*1(pI>Y ", (KerberosPrincipal) null, 2572, kerberosTime0, kerberosTime0, kerberosTime0, (-1), 35, 2572, hashMap0, "", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235958Z", kerberosTime0.getDate());
      assertEquals("19691231235958Z", kerberosTime0.toString());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(2572, principalStoreEntry0.getKDCFlags());
      assertEquals(35, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertFalse(principalStoreEntry0.isLockedOut());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getExpiration();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals((-1000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235958Z", kerberosTime0.getDate());
      assertEquals("19691231235958Z", kerberosTime0.toString());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals("f&", principalStoreEntry0.getDistinguishedName());
      assertEquals("NQrz4wA3*1(pI>Y ", principalStoreEntry0.getUserId());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(2572, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(2572, principalStoreEntry0.getKDCFlags());
      assertEquals(35, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals((-1000L), kerberosTime1.getTime());
      assertEquals("19691231235958Z", kerberosTime1.getDate());
      assertEquals("19691231235958Z", kerberosTime1.toString());
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry((String) null, "Nw+1#fvL6d{Z", (String) null, (KerberosPrincipal) null, 804, kerberosTime0, kerberosTime0, kerberosTime0, 60000, 0, 86400000, hashMap0, (String) null, samType0, false, true, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(804, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getRealmName());
      
      String string0 = principalStoreEntry0.getDistinguishedName();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertNull(principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(804, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getUserId());
      assertNull(principalStoreEntry0.getRealmName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      KerberosTime kerberosTime0 = new KerberosTime((-2559L));
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals((-2000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("=", "", ";qWUm>0segbG]", (KerberosPrincipal) null, 0, kerberosTime0, (KerberosTime) null, kerberosTime0, 14, 93, 206, hashMap0, "", samType0, false, false, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(93, principalStoreEntry0.getMaxRenew());
      assertEquals("=", principalStoreEntry0.getDistinguishedName());
      assertEquals(206, principalStoreEntry0.getKDCFlags());
      assertEquals(14, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(";qWUm>0segbG]", principalStoreEntry0.getUserId());
      
      String string0 = principalStoreEntry0.getDistinguishedName();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals("=", string0);
      assertNotNull(string0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(93, principalStoreEntry0.getMaxRenew());
      assertEquals("=", principalStoreEntry0.getDistinguishedName());
      assertEquals(206, principalStoreEntry0.getKDCFlags());
      assertEquals(14, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(";qWUm>0segbG]", principalStoreEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", (String) null, (String) null, kerberosPrincipal0, 0, kerberosTime0, kerberosTime0, kerberosTime0, 0, (-43), (-1714), hashMap0, "~&3@Z_f,{LCi+", samType0, true, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals((-1714), principalStoreEntry0.getKDCFlags());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getUserId());
      assertEquals((-43), principalStoreEntry0.getMaxRenew());
      
      String string0 = principalStoreEntry0.getCommonName();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNull(string0);
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(principalStoreEntry0.getCommonName());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals((-1714), principalStoreEntry0.getKDCFlags());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertNull(principalStoreEntry0.getUserId());
      assertEquals((-43), principalStoreEntry0.getMaxRenew());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SECURID;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", "", "~&3@Z_f,{LCi+", kerberosPrincipal0, 1624, kerberosTime0, kerberosTime0, kerberosTime0, 86400000, 60000, 604800000, hashMap0, "~&3@Z_f,{LCi+", samType0, true, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getDistinguishedName());
      assertEquals(1624, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      assertEquals(86400000, principalStoreEntry0.getMaxLife());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isLockedOut());
      
      String string0 = principalStoreEntry0.getCommonName();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getDistinguishedName());
      assertEquals(1624, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_SECURID, principalStoreEntry0.getSamType());
      assertEquals(86400000, principalStoreEntry0.getMaxLife());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isLockedOut());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", (String) null, kerberosPrincipal0, 60000, kerberosTime0, kerberosTime0, kerberosTime0, (-1), 0, 606, hashMap0, "~&3@Z_f,{LCi+", samType0, false, true, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(606, principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      
      int int0 = principalStoreEntry0.getMaxRenew();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(0, int0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNull(principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(60000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(606, principalStoreEntry0.getKDCFlags());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "", "~&3@Z_f,{LCi+", kerberosPrincipal0, 86, kerberosTime0, kerberosTime0, kerberosTime0, (-2847), (-135), 1132, hashMap0, "", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(86, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-2847), principalStoreEntry0.getMaxLife());
      assertEquals((-135), principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals(1132, principalStoreEntry0.getKDCFlags());
      assertEquals("", principalStoreEntry0.getCommonName());
      
      boolean boolean0 = principalStoreEntry0.isLockedOut();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertFalse(boolean0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(86, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals((-2847), principalStoreEntry0.getMaxLife());
      assertEquals((-135), principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals(1132, principalStoreEntry0.getKDCFlags());
      assertEquals("", principalStoreEntry0.getCommonName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      KerberosTime kerberosTime0 = new KerberosTime((-2559L));
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertEquals((-2000L), kerberosTime0.getTime());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", (KerberosPrincipal) null, 1858, (KerberosTime) null, kerberosTime0, kerberosTime0, 0, 93, 14, hashMap0, "", samType0, true, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(93, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(1858, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals(14, principalStoreEntry0.getKDCFlags());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      
      String string0 = principalStoreEntry0.getDistinguishedName();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(kerberosTime0.isZero());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(93, principalStoreEntry0.getMaxRenew());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(1858, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals(14, principalStoreEntry0.getKDCFlags());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("CRYPTOCard", "", "", (KerberosPrincipal) null, (-719), (KerberosTime) null, kerberosTime0, kerberosTime0, 3428, (-719), 2513, hashMap0, "", samType0, false, false, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals((-719), principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(3428, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("CRYPTOCard", principalStoreEntry0.getDistinguishedName());
      assertEquals((-719), principalStoreEntry0.getMaxRenew());
      assertEquals(2513, principalStoreEntry0.getKDCFlags());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getValidEnd();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime1);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals((-719), principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(3428, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("CRYPTOCard", principalStoreEntry0.getDistinguishedName());
      assertEquals((-719), principalStoreEntry0.getMaxRenew());
      assertEquals(2513, principalStoreEntry0.getKDCFlags());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("20140214202121Z", kerberosTime1.getDate());
      assertEquals("20140214202121Z", kerberosTime1.toString());
      assertEquals(1392409281000L, kerberosTime1.getTime());
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(kerberosTime0);
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertEquals(0L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("D", "H.dBg]K", "4V_rU", (KerberosPrincipal) null, 909, kerberosTime0, kerberosTime0, kerberosTime0, 0, 86400000, 60000, hashMap0, "hT?", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertNotNull(principalStoreEntry0);
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getValidStart();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime1);
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertTrue(kerberosTime0.isZero());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("19700101000000Z", kerberosTime1.getDate());
      assertEquals("19700101000000Z", kerberosTime1.toString());
      assertEquals(0L, kerberosTime1.getTime());
      assertTrue(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(kerberosTime0.isZero());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("D", "H.dBg]K", "4V_rU", (KerberosPrincipal) null, 909, kerberosTime0, kerberosTime0, kerberosTime0, 0, 86400000, 60000, hashMap0, "hT?", samType0, false, false, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(kerberosTime0.isZero());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      
      int int0 = principalStoreEntry0.getMaxLife();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(0, int0);
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(kerberosTime0.isZero());
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("\"''", "\"''", "\"''", kerberosPrincipal0, (-1519), kerberosTime0, kerberosTime0, kerberosTime0, (-1), 604800000, (-1519), hashMap0, "\"''", samType0, true, true, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("\"''", principalStoreEntry0.getUserId());
      assertEquals("\"''", principalStoreEntry0.getRealmName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals("\"''", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("\"''", principalStoreEntry0.getDistinguishedName());
      assertEquals((-1519), principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
      
      KerberosPrincipal kerberosPrincipal1 = principalStoreEntry0.getPrincipal();
      assertSame(kerberosPrincipal0, kerberosPrincipal1);
      assertSame(kerberosPrincipal1, kerberosPrincipal0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosPrincipal1);
      assertFalse(kerberosTime0.isZero());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("\"''", principalStoreEntry0.getUserId());
      assertEquals("\"''", principalStoreEntry0.getRealmName());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals("\"''", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("\"''", principalStoreEntry0.getDistinguishedName());
      assertEquals((-1519), principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1519), principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      KerberosTime kerberosTime0 = new KerberosTime((-2559L));
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", (KerberosPrincipal) null, 1858, (KerberosTime) null, kerberosTime0, kerberosTime0, 0, 93, 14, hashMap0, "", samType0, true, false, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(1858, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(14, principalStoreEntry0.getKDCFlags());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(93, principalStoreEntry0.getMaxRenew());
      
      KerberosTime kerberosTime1 = principalStoreEntry0.getPasswordEnd();
      assertSame(kerberosTime0, kerberosTime1);
      assertSame(kerberosTime1, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("19691231235957Z", kerberosTime0.getDate());
      assertEquals("19691231235957Z", kerberosTime0.toString());
      assertEquals((-2000L), kerberosTime0.getTime());
      assertFalse(kerberosTime0.isZero());
      assertEquals(1858, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(14, principalStoreEntry0.getKDCFlags());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getCommonName());
      assertEquals(93, principalStoreEntry0.getMaxRenew());
      assertEquals("19691231235957Z", kerberosTime1.getDate());
      assertEquals("19691231235957Z", kerberosTime1.toString());
      assertEquals((-2000L), kerberosTime1.getTime());
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, (-1), kerberosTime0, kerberosTime0, kerberosTime0, (-1), 604800000, (-1), hashMap0, "~&3@Z_f,{LCi+", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getKeyVersionNumber());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      
      boolean boolean0 = principalStoreEntry0.isDisabled();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertFalse(boolean0);
      assertFalse(kerberosTime0.isZero());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals((-1), principalStoreEntry0.getKeyVersionNumber());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_SKEY;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("BOOLEAN", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, 604800000, kerberosTime0, kerberosTime0, kerberosTime0, 60000, (-122), 0, hashMap0, "", samType0, false, false, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("BOOLEAN", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals((-122), principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      
      String string0 = principalStoreEntry0.getRealmName();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("BOOLEAN", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals((-122), principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals(SamType.PA_SAM_TYPE_SKEY, principalStoreEntry0.getSamType());
      assertEquals("", principalStoreEntry0.getRealmName());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_CRYPTOCARD;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "d[Y=QKk4Uz%w", "", (KerberosPrincipal) null, 3778, kerberosTime0, kerberosTime0, kerberosTime0, (-2377), 0, 60000, hashMap0, "6rRSy[q{L94D'hjF", samType0, true, true, kerberosTime0);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(3778, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-2377), principalStoreEntry0.getMaxLife());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals("6rRSy[q{L94D'hjF", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      
      int int0 = principalStoreEntry0.getKDCFlags();
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(60000, int0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(SamType.PA_SAM_TYPE_CRYPTOCARD, principalStoreEntry0.getSamType());
      assertEquals(3778, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-2377), principalStoreEntry0.getMaxLife());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getCommonName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertEquals("6rRSy[q{L94D'hjF", principalStoreEntry0.getRealmName());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      assertNotNull(kerberosPrincipal0);
      
      KerberosTime kerberosTime0 = new KerberosTime();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, 86400000, kerberosTime0, kerberosTime0, kerberosTime0, 60000, 604800000, 86400000, hashMap0, "~&3@Z_f,{LCi+", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      
      SamType samType1 = principalStoreEntry0.getSamType();
      assertSame(samType0, samType1);
      assertSame(samType1, samType0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(SamType.PA_SAM_TYPE_APACHE, samType1);
      assertFalse(kerberosTime0.isZero());
      assertEquals("20140214202121Z", kerberosTime0.getDate());
      assertEquals("20140214202121Z", kerberosTime0.toString());
      assertEquals(1392409281000L, kerberosTime0.getTime());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(SamType.PA_SAM_TYPE_APACHE, principalStoreEntry0.getSamType());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getRealmName());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
      assertEquals("Apache Software Foundation", samType1.toString());
      assertEquals(7, samType1.getOrdinal());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(kerberosTime0);
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(kerberosTime0.isZero());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      SamType samType0 = SamType.PA_SAM_TYPE_DIGI_PATH;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("D", "H.dBg]K", "4V_rU", (KerberosPrincipal) null, 909, kerberosTime0, kerberosTime0, kerberosTime0, 0, 86400000, 60000, hashMap0, "hT?", samType0, false, false, kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertNotNull(principalStoreEntry0);
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
      
      String string0 = principalStoreEntry0.getCommonName();
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals("H.dBg]K", string0);
      assertNotNull(string0);
      assertEquals("19700101000000Z", kerberosTime0.getDate());
      assertEquals("19700101000000Z", kerberosTime0.toString());
      assertEquals(0L, kerberosTime0.getTime());
      assertTrue(kerberosTime0.isZero());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(909, principalStoreEntry0.getKeyVersionNumber());
      assertEquals("D", principalStoreEntry0.getDistinguishedName());
      assertEquals("H.dBg]K", principalStoreEntry0.getCommonName());
      assertEquals(SamType.PA_SAM_TYPE_DIGI_PATH, principalStoreEntry0.getSamType());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals("4V_rU", principalStoreEntry0.getUserId());
      assertEquals("hT?", principalStoreEntry0.getRealmName());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(86400000, principalStoreEntry0.getMaxRenew());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      SamType samType0 = SamType.PA_SAM_TYPE_ENIGMA;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", (KerberosPrincipal) null, 604800000, kerberosTime0, kerberosTime0, kerberosTime0, 1084, 190, 604800000, hashMap0, "d[Y=QKk4Uz%w", samType0, false, false, kerberosTime0);
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertNotNull(principalStoreEntry0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(190, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_ENIGMA, principalStoreEntry0.getSamType());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
      assertEquals(1084, principalStoreEntry0.getMaxLife());
      
      String string0 = principalStoreEntry0.getUserId();
      assertEquals(60000, KerberosTime.MINUTE);
      assertEquals(86400000, KerberosTime.DAY);
      assertEquals(604800000, KerberosTime.WEEK);
      assertEquals("~&3@Z_f,{LCi+", string0);
      assertNotNull(string0);
      assertFalse(kerberosTime0.isZero());
      assertEquals("2922789940817071255Z", kerberosTime0.getDate());
      assertEquals("2922789940817071255Z", kerberosTime0.toString());
      assertEquals(9223372036854775000L, kerberosTime0.getTime());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(190, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getUserId());
      assertEquals("d[Y=QKk4Uz%w", principalStoreEntry0.getRealmName());
      assertEquals(SamType.PA_SAM_TYPE_ENIGMA, principalStoreEntry0.getSamType());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
      assertEquals(1084, principalStoreEntry0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      KerberosTime kerberosTime0 = new KerberosTime();
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      SamType samType0 = SamType.PA_SAM_TYPE_ENIGMA;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", kerberosPrincipal0, 86400000, kerberosTime0, kerberosTime0, kerberosTime0, 86400000, 60000, 604800000, hashMap0, "org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", samType0, false, false, kerberosTime0);
      principalStoreEntry0.getExpiration();
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getRealmName());
      assertEquals("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry", principalStoreEntry0.getUserId());
      assertEquals(60000, principalStoreEntry0.getMaxRenew());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getDistinguishedName());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(86400000, principalStoreEntry0.getMaxLife());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals("~&3@Z_f,{LCi+", principalStoreEntry0.getCommonName());
      assertEquals(604800000, principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KerberosPrincipal kerberosPrincipal0 = new KerberosPrincipal("~&3@Z_f,{LCi+");
      KerberosTime kerberosTime0 = new KerberosTime();
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      SamType samType0 = SamType.PA_SAM_TYPE_APACHE;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", "~&3@Z_f,{LCi+", kerberosPrincipal0, 86400000, kerberosTime0, kerberosTime0, kerberosTime0, 60000, 604800000, 86400000, hashMap0, "~&3@Z_f,{LCi+", samType0, false, false, kerberosTime0);
      principalStoreEntry0.getKeyMap();
      assertEquals(60000, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(604800000, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(86400000, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(86400000, principalStoreEntry0.getKDCFlags());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      KerberosTime kerberosTime0 = new KerberosTime();
      HashMap<EncryptionType, EncryptionKey> hashMap0 = new HashMap<EncryptionType, EncryptionKey>();
      SamType samType0 = SamType.PA_SAM_TYPE_SKEY;
      PrincipalStoreEntry principalStoreEntry0 = new PrincipalStoreEntry("", "", "", (KerberosPrincipal) null, 0, kerberosTime0, kerberosTime0, kerberosTime0, 877, 97, (-2518), hashMap0, "Nw+1#fvL6d{Z", samType0, true, true, kerberosTime0);
      int int0 = principalStoreEntry0.getKeyVersionNumber();
      assertEquals(0, int0);
      assertEquals("", principalStoreEntry0.getDistinguishedName());
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(97, principalStoreEntry0.getMaxRenew());
      assertEquals(877, principalStoreEntry0.getMaxLife());
      assertEquals((-2518), principalStoreEntry0.getKDCFlags());
      assertEquals("Nw+1#fvL6d{Z", principalStoreEntry0.getRealmName());
      assertTrue(principalStoreEntry0.isDisabled());
      assertEquals("", principalStoreEntry0.getUserId());
      assertEquals("", principalStoreEntry0.getCommonName());
  }
}
