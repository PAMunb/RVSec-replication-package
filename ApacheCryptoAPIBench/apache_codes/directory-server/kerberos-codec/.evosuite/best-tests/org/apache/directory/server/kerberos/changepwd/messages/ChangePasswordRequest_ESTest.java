/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:25:10 GMT 2022
 */

package org.apache.directory.server.kerberos.changepwd.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordRequest;
import org.apache.directory.shared.kerberos.messages.ApReq;
import org.apache.directory.shared.kerberos.messages.KrbPriv;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangePasswordRequest_ESTest extends ChangePasswordRequest_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ApReq apReq0 = mock(ApReq.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null).when(apReq0).encode(any(java.nio.ByteBuffer.class));
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null).when(krbPriv0).encode(any(java.nio.ByteBuffer.class));
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((short)49, apReq0, krbPriv0);
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null, (ByteBuffer) null).when(byteBuffer0).putShort(anyShort());
      doReturn((String) null).when(byteBuffer0).toString();
      ByteBuffer byteBuffer1 = changePasswordRequest0.encode(byteBuffer0);
      ByteBuffer byteBuffer2 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer1, byteBuffer1, byteBuffer1, byteBuffer1).when(byteBuffer2).get(any(byte[].class) , anyInt() , anyInt());
      doReturn((short)1, (short)0, (short)1, (short) (-128), (short)1).when(byteBuffer2).getShort();
      doReturn(byteBuffer1, byteBuffer1, byteBuffer1).when(byteBuffer2).putShort(anyShort());
      doReturn("?51O}d").when(byteBuffer2).toString();
      ByteBuffer byteBuffer3 = changePasswordRequest0.encode(byteBuffer2);
      ChangePasswordRequest changePasswordRequest1 = ChangePasswordRequest.decode(byteBuffer3);
      assertEquals((short)0, changePasswordRequest1.getVersionNumber());
      
      ChangePasswordRequest changePasswordRequest2 = ChangePasswordRequest.decode(byteBuffer3);
      assertEquals((short)1, changePasswordRequest2.getVersionNumber());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ApReq apReq0 = mock(ApReq.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(apReq0).encode(any(java.nio.ByteBuffer.class));
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer1).when(krbPriv0).encode(any(java.nio.ByteBuffer.class));
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((short) (-96), apReq0, krbPriv0);
      ByteBuffer byteBuffer2 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null).when(byteBuffer2).get(any(byte[].class) , anyInt() , anyInt());
      doReturn((short)0, (short) (-96), (short)1).when(byteBuffer2).getShort();
      doReturn((ByteBuffer) null, (ByteBuffer) null, (ByteBuffer) null).when(byteBuffer2).putShort(anyShort());
      doReturn("@1_TH%].[L;A?TU").when(byteBuffer2).toString();
      ByteBuffer byteBuffer3 = changePasswordRequest0.encode(byteBuffer2);
      ChangePasswordRequest changePasswordRequest1 = ChangePasswordRequest.decode(byteBuffer3);
      assertEquals((short) (-96), changePasswordRequest1.getVersionNumber());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApReq apReq0 = mock(ApReq.class, new ViolatedAssumptionAnswer());
      doReturn((int)(short) (-96), 1886).when(apReq0).computeLength();
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn(1, 6).when(krbPriv0).computeLength();
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((short) (-96), apReq0, krbPriv0);
      changePasswordRequest0.computeLength();
      short short0 = changePasswordRequest0.computeLength();
      assertEquals((short)1898, short0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApReq apReq0 = mock(ApReq.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(apReq0).encode(any(java.nio.ByteBuffer.class));
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(krbPriv0).encode(any(java.nio.ByteBuffer.class));
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((short) (-128), apReq0, krbPriv0);
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(byteBuffer0).get(any(byte[].class) , anyInt() , anyInt());
      doReturn((short)1, (short)1, (short)6).when(byteBuffer0).getShort();
      doReturn((ByteBuffer) null, (ByteBuffer) null, (ByteBuffer) null).when(byteBuffer0).putShort(anyShort());
      doReturn("").when(byteBuffer0).toString();
      ByteBuffer byteBuffer1 = changePasswordRequest0.encode(byteBuffer0);
      try { 
        ChangePasswordRequest.decode(byteBuffer1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Request failed due to being malformed.
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChangePasswordRequest.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ApReq apReq0 = mock(ApReq.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null).when(apReq0).encode(any(java.nio.ByteBuffer.class));
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null).when(krbPriv0).encode(any(java.nio.ByteBuffer.class));
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((short) (-1), apReq0, krbPriv0);
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null, (ByteBuffer) null).when(byteBuffer0).putShort(anyShort());
      doReturn((String) null).when(byteBuffer0).toString();
      ByteBuffer byteBuffer1 = changePasswordRequest0.encode(byteBuffer0);
      ByteBuffer byteBuffer2 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((short) (-128), (short) (-1), (short) (-1)).when(byteBuffer2).getShort();
      doReturn(byteBuffer1, byteBuffer1, byteBuffer1).when(byteBuffer2).putShort(anyShort());
      doReturn("CdrK$:>-s?@HIm").when(byteBuffer2).toString();
      ByteBuffer byteBuffer3 = changePasswordRequest0.encode(byteBuffer2);
      // Undeclared exception!
      try { 
        ChangePasswordRequest.decode(byteBuffer3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((ApReq) null, (KrbPriv) null);
      KrbPriv krbPriv0 = changePasswordRequest0.getPrivateMessage();
      assertNull(krbPriv0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((ApReq) null, (KrbPriv) null);
      ApReq apReq0 = changePasswordRequest0.getAuthHeader();
      assertNull(apReq0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((ApReq) null, (KrbPriv) null);
      // Undeclared exception!
      try { 
        changePasswordRequest0.encode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordRequest", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ChangePasswordRequest changePasswordRequest0 = new ChangePasswordRequest((ApReq) null, (KrbPriv) null);
      // Undeclared exception!
      try { 
        changePasswordRequest0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordRequest", e);
      }
  }
}
