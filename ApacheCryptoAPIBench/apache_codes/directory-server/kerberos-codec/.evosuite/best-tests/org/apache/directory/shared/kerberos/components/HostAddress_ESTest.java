/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:39:35 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.directory.shared.kerberos.codec.types.HostAddrType;
import org.apache.directory.shared.kerberos.components.HostAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HostAddress_ESTest extends HostAddress_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      HostAddress hostAddress1 = new HostAddress(inetAddress0);
      assertTrue(hostAddress1.equals((Object)hostAddress0));
      
      byte[] byteArray0 = new byte[4];
      hostAddress1.setAddress(byteArray0);
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertFalse(hostAddress1.equals((Object)hostAddress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      HostAddress hostAddress1 = new HostAddress(inetAddress0);
      assertTrue(hostAddress1.equals((Object)hostAddress0));
      
      byte[] byteArray0 = new byte[0];
      hostAddress1.setAddress(byteArray0);
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertFalse(hostAddress1.equals((Object)hostAddress0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      byte[] byteArray0 = new byte[8];
      hostAddress0.setAddress(byteArray0);
      String string0 = hostAddress0.toString();
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
      assertEquals("Unknow host : \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      byte[] byteArray0 = hostAddress0.getAddress();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_DECNET;
      byte[] byteArray0 = new byte[0];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      byte[] byteArray1 = hostAddress0.getAddress();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      hostAddress0.getAddrType();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddress0.setAddrType((int) (byte) (-95));
      HostAddrType hostAddrType0 = hostAddress0.getAddrType();
      assertEquals(0, hostAddrType0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      // Undeclared exception!
      try { 
        hostAddress0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(398);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        hostAddress0.encode(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(359);
      // Undeclared exception!
      try { 
        hostAddress0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      // Undeclared exception!
      try { 
        hostAddress0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostAddress hostAddress0 = null;
      try {
        hostAddress0 = new HostAddress((InetAddress) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(398);
      hostAddress0.encode(byteBuffer0);
      assertEquals(15, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=15 lim=398 cap=398]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_XNS;
      byte[] byteArray0 = new byte[7];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      try { 
        hostAddress0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        hostAddress0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET6;
      hostAddress0.setAddrType(hostAddrType0);
      int int0 = hostAddress0.computeLength();
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddress0.computeLength();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        hostAddress0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getByName("&Eq6R?DwGb");
      HostAddress hostAddress1 = new HostAddress(inetAddress1);
      boolean boolean0 = hostAddress0.equals(hostAddress1);
      assertFalse(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress1.getAddrType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      byte[] byteArray0 = new byte[8];
      hostAddress0.setAddress(byteArray0);
      HostAddress hostAddress1 = new HostAddress(inetAddress0);
      boolean boolean0 = hostAddress0.equals(hostAddress1);
      assertFalse(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress1.getAddrType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      HostAddress hostAddress1 = new HostAddress();
      boolean boolean0 = hostAddress0.equals(hostAddress1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddress0.setAddress((byte[]) null);
      HostAddress hostAddress1 = new HostAddress(inetAddress0);
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertFalse(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress1.getAddrType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      HostAddress hostAddress1 = new HostAddress();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET;
      hostAddress1.setAddrType(hostAddrType0);
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertFalse(hostAddress0.equals((Object)hostAddress1));
      assertFalse(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_APPLETALK;
      HostAddress hostAddress1 = new HostAddress(hostAddrType0, (byte[]) null);
      boolean boolean0 = hostAddress1.equals(hostAddress0);
      assertFalse(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      Object object0 = new Object();
      boolean boolean0 = hostAddress0.equals(object0);
      assertFalse(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      boolean boolean0 = hostAddress0.equals(hostAddress0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      HostAddress hostAddress1 = new HostAddress(inetAddress0);
      boolean boolean0 = hostAddress0.equals(hostAddress1);
      assertTrue(boolean0);
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress1.getAddrType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddress0.hashCode();
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      HostAddrType hostAddrType0 = hostAddress0.getAddrType();
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddrType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HostAddress hostAddress0 = new HostAddress();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      hostAddress0.setAddrType(hostAddrType0);
      hostAddress0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InetAddress inetAddress0 = InetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddress0.getAddress();
      assertEquals(HostAddrType.ADDRTYPE_INET, hostAddress0.getAddrType());
  }
}
