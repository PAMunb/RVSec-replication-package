/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:20:04 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.crypto.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.server.kerberos.shared.crypto.encryption.ArcFourHmacMd5Encryption;
import org.apache.directory.server.kerberos.shared.crypto.encryption.KeyUsage;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArcFourHmacMd5Encryption_ESTest extends ArcFourHmacMd5Encryption_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      // Undeclared exception!
      try { 
        arcFourHmacMd5Encryption0.calculateIntegrity(byteArray0, byteArray1, (KeyUsage) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // MAC not initialized
         //
         verifyException("javax.crypto.Mac", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn(4875).when(encryptionKey0).getKeyVersion();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      EncryptedData encryptedData0 = arcFourHmacMd5Encryption0.getEncryptedData(encryptionKey0, (byte[]) null, keyUsage0);
      assertEquals(4875, encryptedData0.getKvno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(encryptionKey0).getKeyVersion();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      EncryptedData encryptedData0 = arcFourHmacMd5Encryption0.getEncryptedData(encryptionKey0, (byte[]) null, keyUsage0);
      KeyUsage keyUsage1 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = arcFourHmacMd5Encryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage1);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(encryptionKey0).getKeyVersion();
      byte[] byteArray0 = new byte[3];
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      EncryptedData encryptedData0 = arcFourHmacMd5Encryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
      KeyUsage keyUsage1 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = arcFourHmacMd5Encryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage1);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = arcFourHmacMd5Encryption0.encrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = arcFourHmacMd5Encryption0.encrypt(byteArray0, byteArray0);
      assertEquals(9, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = arcFourHmacMd5Encryption0.decrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = arcFourHmacMd5Encryption0.decrypt(byteArray0, byteArray0);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        arcFourHmacMd5Encryption0.getDecryptedData(encryptionKey0, (EncryptedData) null, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.ArcFourHmacMd5Encryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      // Undeclared exception!
      try { 
        arcFourHmacMd5Encryption0.encrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      EncryptionType encryptionType0 = arcFourHmacMd5Encryption0.getEncryptionType();
      assertEquals("rc4-hmac", encryptionType0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byte[] byteArray2 = arcFourHmacMd5Encryption0.decrypt(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      // Undeclared exception!
      try { 
        arcFourHmacMd5Encryption0.decrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[9];
      byte[] byteArray2 = arcFourHmacMd5Encryption0.encrypt(byteArray0, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(encryptionKey0).getKeyVersion();
      byte[] byteArray0 = new byte[0];
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      EncryptedData encryptedData0 = arcFourHmacMd5Encryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
      KeyUsage keyUsage1 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = arcFourHmacMd5Encryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage1);
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      int int0 = arcFourHmacMd5Encryption0.getConfounderLength();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        arcFourHmacMd5Encryption0.getEncryptedData((EncryptionKey) null, byteArray0, (KeyUsage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.ArcFourHmacMd5Encryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArcFourHmacMd5Encryption arcFourHmacMd5Encryption0 = new ArcFourHmacMd5Encryption();
      int int0 = arcFourHmacMd5Encryption0.getChecksumLength();
      assertEquals(16, int0);
  }
}
