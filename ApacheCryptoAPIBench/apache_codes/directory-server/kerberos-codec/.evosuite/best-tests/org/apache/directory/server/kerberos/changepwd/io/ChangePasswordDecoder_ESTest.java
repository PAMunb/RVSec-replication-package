/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:20:10 GMT 2022
 */

package org.apache.directory.server.kerberos.changepwd.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.server.kerberos.changepwd.io.ChangePasswordDecoder;
import org.apache.directory.server.kerberos.changepwd.messages.AbstractPasswordMessage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangePasswordDecoder_ESTest extends ChangePasswordDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null).when(byteBuffer0).get(any(byte[].class) , anyInt() , anyInt());
      doReturn((-476)).when(byteBuffer0).getInt();
      doReturn((short)0, (short)0, (short)1).when(byteBuffer0).getShort();
      AbstractPasswordMessage abstractPasswordMessage0 = ChangePasswordDecoder.decode(byteBuffer0, true);
      assertEquals((short)1, AbstractPasswordMessage.OLD_PVNO);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0, (ByteBuffer) null).when(byteBuffer1).get(any(byte[].class) , anyInt() , anyInt());
      doReturn((short)0, (short)1, (short)0).when(byteBuffer1).getShort();
      AbstractPasswordMessage abstractPasswordMessage0 = ChangePasswordDecoder.decode(byteBuffer1, false);
      assertEquals((short)1, AbstractPasswordMessage.OLD_PVNO);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0, byteBuffer0).when(byteBuffer1).get(any(byte[].class) , anyInt() , anyInt());
      doReturn(331).when(byteBuffer1).getInt();
      doReturn((short) (-1840), (short) (-1840), (short)1).when(byteBuffer1).getShort();
      AbstractPasswordMessage abstractPasswordMessage0 = ChangePasswordDecoder.decode(byteBuffer1, true);
      assertEquals((short) (-128), AbstractPasswordMessage.PVNO);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(byteBuffer1).get(any(byte[].class));
      doReturn(byteBuffer0).when(byteBuffer1).get(any(byte[].class) , anyInt() , anyInt());
      doReturn((short)3148, (short)3148, (short)3148, (short)0, (short)0).when(byteBuffer1).getShort();
      // Undeclared exception!
      try { 
        ChangePasswordDecoder.decode(byteBuffer1, false);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordError", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChangePasswordDecoder.decode((ByteBuffer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.io.ChangePasswordDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ChangePasswordDecoder changePasswordDecoder0 = new ChangePasswordDecoder();
  }
}
