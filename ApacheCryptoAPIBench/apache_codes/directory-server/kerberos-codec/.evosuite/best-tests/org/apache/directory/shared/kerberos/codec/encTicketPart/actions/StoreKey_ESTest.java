/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:22:38 GMT 2022
 */

package org.apache.directory.shared.kerberos.codec.encTicketPart.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.shared.kerberos.codec.encTicketPart.EncTicketPartContainer;
import org.apache.directory.shared.kerberos.codec.encTicketPart.actions.StoreKey;
import org.apache.directory.shared.kerberos.components.EncTicketPart;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StoreKey_ESTest extends StoreKey_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StoreKey storeKey0 = new StoreKey();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      EncTicketPartContainer encTicketPartContainer0 = mock(EncTicketPartContainer.class, new ViolatedAssumptionAnswer());
      doReturn((EncTicketPart) null).when(encTicketPartContainer0).getEncTicketPart();
      // Undeclared exception!
      try { 
        storeKey0.setEncryptionKey(encryptionKey0, encTicketPartContainer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.encTicketPart.actions.StoreKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StoreKey storeKey0 = new StoreKey();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      EncTicketPart encTicketPart0 = mock(EncTicketPart.class, new ViolatedAssumptionAnswer());
      EncTicketPartContainer encTicketPartContainer0 = mock(EncTicketPartContainer.class, new ViolatedAssumptionAnswer());
      doReturn(encTicketPart0).when(encTicketPartContainer0).getEncTicketPart();
      storeKey0.setEncryptionKey(encryptionKey0, encTicketPartContainer0);
      assertEquals("EncTicketPart key", storeKey0.toString());
  }
}
