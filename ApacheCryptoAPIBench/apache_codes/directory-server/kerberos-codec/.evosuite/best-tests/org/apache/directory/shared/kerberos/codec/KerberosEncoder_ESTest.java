/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:07:12 GMT 2022
 */

package org.apache.directory.shared.kerberos.codec;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import org.apache.directory.api.asn1.Asn1Object;
import org.apache.directory.shared.kerberos.codec.KerberosEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KerberosEncoder_ESTest extends KerberosEncoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Asn1Object asn1Object0 = mock(Asn1Object.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(asn1Object0).computeLength();
      // Undeclared exception!
      try { 
        KerberosEncoder.encode(asn1Object0, true);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosEncoder.encode((Asn1Object) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.KerberosEncoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Asn1Object asn1Object0 = mock(Asn1Object.class, new ViolatedAssumptionAnswer());
      doReturn((-26)).when(asn1Object0).computeLength();
      // Undeclared exception!
      try { 
        KerberosEncoder.encode(asn1Object0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Asn1Object asn1Object0 = mock(Asn1Object.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asn1Object0).computeLength();
      doReturn((ByteBuffer) null).when(asn1Object0).encode(any(java.nio.ByteBuffer.class));
      ByteBuffer byteBuffer0 = KerberosEncoder.encode(asn1Object0, true);
      assertEquals(4, byteBuffer0.capacity());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Asn1Object asn1Object0 = mock(Asn1Object.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(asn1Object0).computeLength();
      doReturn((ByteBuffer) null).when(asn1Object0).encode(any(java.nio.ByteBuffer.class));
      ByteBuffer byteBuffer0 = KerberosEncoder.encode(asn1Object0, false);
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      KerberosEncoder kerberosEncoder0 = new KerberosEncoder();
  }
}
