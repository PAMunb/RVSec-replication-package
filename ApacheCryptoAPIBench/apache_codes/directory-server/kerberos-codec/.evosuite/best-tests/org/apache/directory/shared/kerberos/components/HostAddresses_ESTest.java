/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:38:45 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.nio.ByteBuffer;
import org.apache.directory.shared.kerberos.codec.types.HostAddrType;
import org.apache.directory.shared.kerberos.components.HostAddress;
import org.apache.directory.shared.kerberos.components.HostAddresses;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HostAddresses_ESTest extends HostAddresses_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      HostAddress[] hostAddressArray0 = new HostAddress[2];
      HostAddresses hostAddresses1 = new HostAddresses(hostAddressArray0);
      boolean boolean0 = hostAddresses1.equals(hostAddresses0);
      assertFalse(hostAddresses0.equals((Object)hostAddresses1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses((HostAddress[]) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        hostAddresses0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HostAddress[] hostAddressArray0 = new HostAddress[3];
      HostAddresses hostAddresses0 = new HostAddresses(hostAddressArray0);
      HostAddress[] hostAddressArray1 = hostAddresses0.getAddresses();
      assertNotSame(hostAddressArray0, hostAddressArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HostAddress[] hostAddressArray0 = new HostAddress[1];
      HostAddresses hostAddresses0 = new HostAddresses(hostAddressArray0);
      // Undeclared exception!
      try { 
        hostAddresses0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HostAddress[] hostAddressArray0 = new HostAddress[1];
      HostAddress hostAddress0 = new HostAddress();
      hostAddressArray0[0] = hostAddress0;
      HostAddresses hostAddresses0 = new HostAddresses(hostAddressArray0);
      // Undeclared exception!
      try { 
        hostAddresses0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      hostAddresses0.addHostAddress((HostAddress) null);
      // Undeclared exception!
      try { 
        hostAddresses0.equals(hostAddresses0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        hostAddresses0.equals(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.apache.directory.shared.kerberos.components.HostAddresses
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      HostAddress hostAddress0 = new HostAddress();
      hostAddresses0.addHostAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(230);
      // Undeclared exception!
      try { 
        hostAddresses0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HostAddress[] hostAddressArray0 = new HostAddress[7];
      HostAddresses hostAddresses0 = new HostAddresses(hostAddressArray0);
      // Undeclared exception!
      try { 
        hostAddresses0.addHostAddress(hostAddressArray0[5]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      HostAddress hostAddress0 = new HostAddress();
      hostAddresses0.addHostAddress(hostAddress0);
      hostAddresses0.addHostAddress(hostAddress0);
      String string0 = hostAddresses0.toString();
      assertEquals("Unknow host : , Unknow host : ", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      String string0 = hostAddresses0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddresses0.addHostAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3430);
      hostAddresses0.encode(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=17 lim=3430 cap=3430]", byteBuffer0.toString());
      assertEquals(17, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      try { 
        hostAddresses0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      hostAddresses0.encode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      HostAddress hostAddress0 = new HostAddress(inetAddress0);
      hostAddresses0.addHostAddress(hostAddress0);
      hostAddresses0.computeLength();
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      try { 
        hostAddresses0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      int int0 = hostAddresses0.computeLength();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      byte[] byteArray0 = new byte[3];
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      hostAddresses0.addHostAddress(hostAddress0);
      HostAddress[] hostAddressArray0 = new HostAddress[1];
      HostAddress hostAddress1 = new HostAddress();
      hostAddressArray0[0] = hostAddress1;
      HostAddresses hostAddresses1 = new HostAddresses(hostAddressArray0);
      boolean boolean0 = hostAddresses1.equals(hostAddresses0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      byte[] byteArray0 = new byte[8];
      HostAddresses hostAddresses1 = new HostAddresses();
      assertTrue(hostAddresses1.equals((Object)hostAddresses0));
      
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_DECNET;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      hostAddresses1.addHostAddress(hostAddress0);
      boolean boolean0 = hostAddresses0.equals(hostAddresses1);
      assertFalse(hostAddresses1.equals((Object)hostAddresses0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      boolean boolean0 = hostAddresses0.equals(hostAddresses0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      hostAddresses0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      HostAddress hostAddress0 = new HostAddress();
      hostAddresses0.addHostAddress(hostAddress0);
      boolean boolean0 = hostAddresses0.contains(hostAddress0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      byte[] byteArray0 = new byte[3];
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      boolean boolean0 = hostAddresses0.contains(hostAddress0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses((HostAddress[]) null);
      boolean boolean0 = hostAddresses0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HostAddress[] hostAddressArray0 = new HostAddress[1];
      HostAddresses hostAddresses0 = new HostAddresses(hostAddressArray0);
      // Undeclared exception!
      try { 
        hostAddresses0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.HostAddresses", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      HostAddress[] hostAddressArray0 = hostAddresses0.getAddresses();
      assertEquals(0, hostAddressArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HostAddresses hostAddresses0 = new HostAddresses();
      byte[] byteArray0 = new byte[3];
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_NETBIOS;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      hostAddresses0.addHostAddress(hostAddress0);
      boolean boolean0 = hostAddresses0.equals(hostAddresses0);
      assertTrue(boolean0);
  }
}
