/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:12:13 GMT 2022
 */

package org.apache.directory.shared.kerberos.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.shared.kerberos.exceptions.ErrorType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ErrorType_ESTest extends ErrorType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue(0);
      int int0 = errorType0.getValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue(1);
      ErrorType errorType1 = ErrorType.getTypeByValue((-394));
      int int0 = errorType1.compareTo(errorType0);
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue(1);
      ErrorType errorType1 = ErrorType.getTypeByValue((-394));
      int int0 = errorType0.compareTo(errorType1);
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ErrorType errorType0 = ErrorType.KDC_ERR_SERVICE_NOTYET;
      // Undeclared exception!
      try { 
        errorType0.compareTo((ErrorType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.ErrorType", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue(60);
      assertEquals("Generic error (description in e-text)", errorType0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue((-1142));
      int int0 = errorType0.compareTo(errorType0);
      assertEquals(0, int0);
      assertEquals("Generic error (description in e-text)", errorType0.toString());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue((-1142));
      int int0 = errorType0.getValue();
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue((-1142));
      String string0 = errorType0.getMessage();
      assertEquals("Generic error (description in e-text)", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ErrorType errorType0 = ErrorType.getTypeByValue((-1142));
      String string0 = errorType0.toString();
      assertEquals("Generic error (description in e-text)", string0);
  }
}
