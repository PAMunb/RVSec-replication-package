/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:11:59 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.store;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import javax.security.auth.kerberos.KerberosPrincipal;
import org.apache.directory.api.ldap.model.entry.DefaultAttribute;
import org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntry;
import org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntryModifier;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.SamType;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PrincipalStoreEntryModifier_ESTest extends PrincipalStoreEntryModifier_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setMaxRenew((-306));
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals((-306), principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setMaxLife((-1));
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals((-1), principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertFalse(principalStoreEntry0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setKeyVersionNumber((-1324));
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals((-1324), principalStoreEntry0.getKeyVersionNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setKDCFlags(60000);
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(60000, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setKDCFlags((-1));
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals((-1), principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      byte[][] byteArray0 = new byte[14][3];
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)74;
      byteArray0[0] = byteArray1;
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntryModifier", byteArray0);
      // Undeclared exception!
      try { 
        principalStoreEntryModifier0.reconstituteKeyMap(defaultAttribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntryModifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      String[] stringArray0 = new String[3];
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("2>u-dIrdz(Vv+IR", stringArray0);
      // Undeclared exception!
      try { 
        principalStoreEntryModifier0.reconstituteKeyMap(defaultAttribute0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // ERR_626 Kerberos key should not be a String.
         //
         verifyException("org.apache.directory.server.kerberos.shared.store.PrincipalStoreEntryModifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][3];
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("'Z~)|GX'Iy8f$7!U/", byteArray0);
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      try { 
        principalStoreEntryModifier0.reconstituteKeyMap(defaultAttribute0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integrity check on decrypted field failed
         //
         verifyException("org.apache.directory.shared.kerberos.codec.KerberosDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("p2>_x|XLEl");
      Map<EncryptionType, EncryptionKey> map0 = principalStoreEntryModifier0.reconstituteKeyMap(defaultAttribute0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setPrincipal((KerberosPrincipal) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setKeyVersionNumber(1);
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(1, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setKeyMap((Map<EncryptionType, EncryptionKey>) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setMaxLife(2460);
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(2460, principalStoreEntry0.getMaxLife());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setDistinguishedName("");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setLockedOut(true);
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertTrue(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isDisabled());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertEquals(0, principalStoreEntry0.getMaxRenew());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setUserId("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      principalStoreEntryModifier0.setValidStart(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      SamType samType0 = SamType.PA_SAM_TYPE_SECURID;
      principalStoreEntryModifier0.setSamType(samType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setRealmName("");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setValidEnd((KerberosTime) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      MockDate mockDate0 = new MockDate();
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      principalStoreEntryModifier0.setPasswordEnd(kerberosTime0);
      assertFalse(kerberosTime0.isZero());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setCommonName((String) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setDisabled(true);
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertEquals(0, principalStoreEntry0.getMaxRenew());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertTrue(principalStoreEntry0.isDisabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      KerberosTime kerberosTime0 = new KerberosTime();
      principalStoreEntryModifier0.setExpiration(kerberosTime0);
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PrincipalStoreEntryModifier principalStoreEntryModifier0 = new PrincipalStoreEntryModifier();
      principalStoreEntryModifier0.setMaxRenew(1);
      PrincipalStoreEntry principalStoreEntry0 = principalStoreEntryModifier0.getEntry();
      assertEquals(0, principalStoreEntry0.getKeyVersionNumber());
      assertFalse(principalStoreEntry0.isLockedOut());
      assertEquals(0, principalStoreEntry0.getMaxLife());
      assertEquals(0, principalStoreEntry0.getKDCFlags());
      assertEquals(1, principalStoreEntry0.getMaxRenew());
      assertFalse(principalStoreEntry0.isDisabled());
  }
}
