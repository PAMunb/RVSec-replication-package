/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:46:53 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.crypto.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.server.kerberos.shared.crypto.encryption.Des3CbcSha1KdEncryption;
import org.apache.directory.server.kerberos.shared.crypto.encryption.KeyUsage;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.crypto.checksum.ChecksumType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Des3CbcSha1KdEncryption_ESTest extends Des3CbcSha1KdEncryption_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray1);
      assertNotNull(encryptionKey0);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.RC4_MD4, encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(11, keyUsage0.getOrdinal());
      
      EncryptedData encryptedData0 = des3CbcSha1KdEncryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
      assertNotNull(encryptedData0);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(EncryptedData.HAS_KVNO);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.RC4_MD4, encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertEquals(11, keyUsage0.getOrdinal());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, encryptedData0.getEType());
      assertEquals((-1), encryptedData0.getKvno());
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(11, keyUsage0.getOrdinal());
      
      byte[] byteArray2 = des3CbcSha1KdEncryption0.calculateChecksum(byteArray0, byteArray1, keyUsage0);
      assertNotNull(byteArray2);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(11, keyUsage0.getOrdinal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = des3CbcSha1KdEncryption0.setParity(byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1, (byte)1}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(8, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(11, keyUsage0.getOrdinal());
      
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_EXP;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray1, 49);
      assertNotNull(encryptionKey0);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(49, encryptionKey0.getKeyVersion());
      assertEquals(EncryptionType.RC4_HMAC_EXP, encryptionKey0.getKeyType());
      
      EncryptedData encryptedData0 = des3CbcSha1KdEncryption0.getEncryptedData(encryptionKey0, byteArray1, keyUsage0);
      assertNotNull(encryptedData0);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(EncryptedData.HAS_KVNO);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(11, keyUsage0.getOrdinal());
      assertEquals(49, encryptionKey0.getKeyVersion());
      assertEquals(EncryptionType.RC4_HMAC_EXP, encryptionKey0.getKeyType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, encryptedData0.getEType());
      assertTrue(encryptedData0.hasKvno());
      assertEquals(49, encryptedData0.getKvno());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = des3CbcSha1KdEncryption0.getBitGroup(byteArray0, (byte)0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.encrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(23, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      byte[] byteArray2 = des3CbcSha1KdEncryption0.encrypt(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(23, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertEquals(24, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[61];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(61, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      byte[] byteArray2 = des3CbcSha1KdEncryption0.decrypt(byteArray1, byteArray1);
      assertNotNull(byteArray2);
      assertEquals(61, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertEquals(24, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_TGS_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(4, keyUsage0.getOrdinal());
      
      byte[] byteArray2 = des3CbcSha1KdEncryption0.calculateIntegrity(byteArray0, byteArray1, keyUsage0);
      assertNotNull(byteArray2);
      assertEquals(38, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertEquals(20, byteArray2.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray1, byteArray2);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(4, keyUsage0.getOrdinal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.setParity((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.Des3CbcSha1KdEncryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.setParity(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.randomToKey((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.randomToKey(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      EncryptionKey encryptionKey0 = new EncryptionKey();
      assertNotNull(encryptionKey0);
      assertNull(encryptionKey0.getKeyType());
      assertEquals(0, encryptionKey0.getKeyVersion());
      
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_PA_TGS_REQ_PADATA_AP_REQ_TGS_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(7, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getEncryptedData(encryptionKey0, (byte[]) null, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      EncryptedData encryptedData0 = new EncryptedData();
      assertNotNull(encryptedData0);
      assertTrue(EncryptedData.HAS_KVNO);
      assertNull(encryptedData0.getEType());
      assertFalse(encryptedData0.hasKvno());
      assertEquals((-1), encryptedData0.getKvno());
      
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_TGS_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(4, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getDecryptedData((EncryptionKey) null, encryptedData0, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.Des3CbcSha1KdEncryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      EncryptionKey encryptionKey0 = new EncryptionKey();
      assertNotNull(encryptionKey0);
      assertEquals(0, encryptionKey0.getKeyVersion());
      assertNull(encryptionKey0.getKeyType());
      
      EncryptedData encryptedData0 = new EncryptedData();
      assertNotNull(encryptedData0);
      assertTrue(EncryptedData.HAS_KVNO);
      assertEquals((-1), encryptedData0.getKvno());
      assertNull(encryptedData0.getEType());
      assertFalse(encryptedData0.hasKvno());
      
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_AUTHNT_SUB_KEY;
      assertNotNull(keyUsage0);
      assertEquals(5, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      assertNotNull(byteArray1);
      assertEquals(48, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray1, 57);
      assertNotNull(encryptionKey0);
      assertEquals(48, byteArray0.length);
      assertEquals(24, byteArray1.length);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptionKey0.getKeyType());
      assertEquals(57, encryptionKey0.getKeyVersion());
      
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 2738, byteArray2);
      assertNotNull(encryptedData0);
      assertArrayEquals(new byte[] {}, byteArray2);
      assertEquals(0, byteArray2.length);
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertTrue(EncryptedData.HAS_KVNO);
      assertEquals(2738, encryptedData0.getKvno());
      assertEquals(EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID, encryptedData0.getEType());
      assertTrue(encryptedData0.hasKvno());
      
      KeyUsage keyUsage0 = KeyUsage.AP_REQ_AUTHNT_CKSUM_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(10, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getBitGroup((byte[]) null, 91);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getBitGroup(byteArray0, 39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      // Undeclared exception!
      des3CbcSha1KdEncryption0.deriveKey(byteArray0, byteArray0, 2078, 2078);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.deriveKey((byte[]) null, (byte[]) null, (-1785), (-1785));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.NFold", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[63];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.deriveKey(byteArray0, byteArray0, 24, (-1675));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.deriveKey(byteArray0, byteArray1, (byte)24, (byte)24);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.deriveKey(byteArray0, byteArray0, 7, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.deriveKey(byteArray0, byteArray0, (-1401), (-1401));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.NFold", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.decrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_AUTHNT_SUB_KEY;
      assertNotNull(keyUsage0);
      assertEquals(5, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.calculateIntegrity((byte[]) null, (byte[]) null, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      
      byte[] byteArray0 = new byte[2];
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_TGS_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(4, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.calculateChecksum(byteArray0, byteArray0, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      assertNotNull(des3CbcSha1KdEncryption0);
      assertEquals(EncryptionType.DES3_CBC_SHA1_KD, des3CbcSha1KdEncryption0.getEncryptionType());
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      assertEquals(ChecksumType.HMAC_SHA1_DES3_KD, des3CbcSha1KdEncryption0.checksumType());
      
      KeyUsage keyUsage0 = KeyUsage.TGS_REQ_KDC_REQ_BODY_AUTHZ_DATA_ENC_WITH_TGS_SESS_KEY;
      assertNotNull(keyUsage0);
      assertEquals(4, keyUsage0.getOrdinal());
      
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.calculateChecksum((byte[]) null, (byte[]) null, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[48];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      byte[] byteArray2 = des3CbcSha1KdEncryption0.randomToKey(byteArray1);
      assertEquals(24, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      int int0 = des3CbcSha1KdEncryption0.getConfounderLength();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.encrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.calculateIntegrity((byte[]) null, (byte[]) null, (KeyUsage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      EncryptionType encryptionType0 = des3CbcSha1KdEncryption0.getEncryptionType();
      assertEquals(16, encryptionType0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      int int0 = des3CbcSha1KdEncryption0.getChecksumLength();
      assertEquals(20, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[61];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      byte[] byteArray1 = des3CbcSha1KdEncryption0.decrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_MD5;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray1);
      KeyUsage keyUsage0 = KeyUsage.KRB_PRIV_ENC_PART_CHOSEN_KEY;
      KeyUsage keyUsage1 = KeyUsage.AS_REQ_PA_ENC_TIMESTAMP_WITH_CKEY;
      EncryptedData encryptedData0 = des3CbcSha1KdEncryption0.getEncryptedData(encryptionKey0, byteArray1, keyUsage1);
      try { 
        des3CbcSha1KdEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Integrity check on decrypted field failed
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.Des3CbcSha1KdEncryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[79];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      byte[] byteArray1 = des3CbcSha1KdEncryption0.randomToKey(byteArray0);
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray1);
      assertEquals(24, byteArray1.length);
      
      KeyUsage keyUsage0 = KeyUsage.AS_REP_ENC_PART_WITH_CKEY;
      EncryptedData encryptedData0 = des3CbcSha1KdEncryption0.getEncryptedData(encryptionKey0, byteArray1, keyUsage0);
      assertEquals(20, des3CbcSha1KdEncryption0.getChecksumLength());
      
      byte[] byteArray2 = des3CbcSha1KdEncryption0.getDecryptedData(encryptionKey0, encryptedData0, keyUsage0);
      assertEquals(8, des3CbcSha1KdEncryption0.getConfounderLength());
      assertEquals(24, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      ChecksumType checksumType0 = des3CbcSha1KdEncryption0.checksumType();
      assertEquals(12, checksumType0.getValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[79];
      Des3CbcSha1KdEncryption des3CbcSha1KdEncryption0 = new Des3CbcSha1KdEncryption();
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0);
      KeyUsage keyUsage0 = KeyUsage.AS_REP_ENC_PART_WITH_CKEY;
      // Undeclared exception!
      try { 
        des3CbcSha1KdEncryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }
}
