/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:40:23 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.keytab;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.directory.server.kerberos.shared.keytab.KeytabEntry;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KeytabEntry_ESTest extends KeytabEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KerberosTime kerberosTime0 = mock(KerberosTime.class, new ViolatedAssumptionAnswer());
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry("", 0, kerberosTime0, (byte)9, encryptionKey0);
      int int0 = keytabEntry0.getPrincipalType();
      assertEquals((byte)9, keytabEntry0.getKeyVersion());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KerberosTime kerberosTime0 = mock(KerberosTime.class, new ViolatedAssumptionAnswer());
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry((String) null, 399, kerberosTime0, (byte)0, encryptionKey0);
      int int0 = keytabEntry0.getPrincipalType();
      assertEquals(399, int0);
      assertEquals((byte)0, keytabEntry0.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KerberosTime kerberosTime0 = mock(KerberosTime.class, new ViolatedAssumptionAnswer());
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry((String) null, 399, kerberosTime0, (byte)0, encryptionKey0);
      keytabEntry0.getPrincipalName();
      assertEquals(399, keytabEntry0.getPrincipalType());
      assertEquals((byte)0, keytabEntry0.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KerberosTime kerberosTime0 = mock(KerberosTime.class, new ViolatedAssumptionAnswer());
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry("", 0, kerberosTime0, (byte)9, encryptionKey0);
      keytabEntry0.getPrincipalName();
      assertEquals(0, keytabEntry0.getPrincipalType());
      assertEquals((byte)9, keytabEntry0.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KerberosTime kerberosTime0 = mock(KerberosTime.class, new ViolatedAssumptionAnswer());
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry((String) null, 399, kerberosTime0, (byte)0, encryptionKey0);
      byte byte0 = keytabEntry0.getKeyVersion();
      assertEquals((byte)0, byte0);
      assertEquals(399, keytabEntry0.getPrincipalType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KeytabEntry keytabEntry0 = new KeytabEntry("", (byte) (-11), (KerberosTime) null, (byte) (-11), (EncryptionKey) null);
      byte byte0 = keytabEntry0.getKeyVersion();
      assertEquals((byte) (-11), byte0);
      assertEquals((-11), keytabEntry0.getPrincipalType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KeytabEntry keytabEntry0 = new KeytabEntry("@\"", (byte) (-11), (KerberosTime) null, (byte) (-11), (EncryptionKey) null);
      keytabEntry0.getKey();
      assertEquals((byte) (-11), keytabEntry0.getKeyVersion());
      assertEquals((-11), keytabEntry0.getPrincipalType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry("RW>#\"\"B*d%", (-286), (KerberosTime) null, (byte)9, encryptionKey0);
      keytabEntry0.getTimeStamp();
      assertEquals((byte)9, keytabEntry0.getKeyVersion());
      assertEquals((-286), keytabEntry0.getPrincipalType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry("RW>#\"\"B*d%", (-286), (KerberosTime) null, (byte)9, encryptionKey0);
      byte byte0 = keytabEntry0.getKeyVersion();
      assertEquals((byte)9, byte0);
      assertEquals((-286), keytabEntry0.getPrincipalType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      KeytabEntry keytabEntry0 = new KeytabEntry("RW>#\"\"B*d%", (-286), (KerberosTime) null, (byte)9, encryptionKey0);
      keytabEntry0.getPrincipalName();
      assertEquals((byte)9, keytabEntry0.getKeyVersion());
      assertEquals((-286), keytabEntry0.getPrincipalType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KeytabEntry keytabEntry0 = new KeytabEntry("RESERVED4", (byte) (-11), (KerberosTime) null, (byte) (-11), (EncryptionKey) null);
      int int0 = keytabEntry0.getPrincipalType();
      assertEquals((-11), int0);
      assertEquals((byte) (-11), keytabEntry0.getKeyVersion());
  }
}
