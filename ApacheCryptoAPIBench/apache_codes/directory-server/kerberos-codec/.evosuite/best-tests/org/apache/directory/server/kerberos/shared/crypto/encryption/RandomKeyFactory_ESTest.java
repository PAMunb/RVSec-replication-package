/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:53:53 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.crypto.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import org.apache.directory.server.kerberos.shared.crypto.encryption.RandomKeyFactory;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class RandomKeyFactory_ESTest extends RandomKeyFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>();
      EncryptionType encryptionType0 = EncryptionType.AES128_CTS_HMAC_SHA1_96;
      linkedHashSet0.add(encryptionType0);
      Map<EncryptionType, EncryptionKey> map0 = RandomKeyFactory.getRandomKeys((Set<EncryptionType>) linkedHashSet0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomKeyFactory.getRandomKeys((Set<EncryptionType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.RandomKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        RandomKeyFactory.getRandomKey((EncryptionType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.RandomKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = RandomKeyFactory.getRandomKey(encryptionType0);
      assertEquals(EncryptionType.AES256_CTS_HMAC_SHA1_96, encryptionKey0.getKeyType());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.AES128_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = RandomKeyFactory.getRandomKey(encryptionType0);
      assertEquals(0, encryptionKey0.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Collection<EncryptionType> collection0 = EncryptionType.getEncryptionTypes();
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>(collection0);
      try { 
        RandomKeyFactory.getRandomKeys((Set<EncryptionType>) linkedHashSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_616 subkey-keymaterial is not a supported encryption type.
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.RandomKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedHashSet<EncryptionType> linkedHashSet0 = new LinkedHashSet<EncryptionType>();
      Map<EncryptionType, EncryptionKey> map0 = RandomKeyFactory.getRandomKeys((Set<EncryptionType>) linkedHashSet0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.NULL;
      try { 
        RandomKeyFactory.getRandomKey(encryptionType0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_616 null is not a supported encryption type.
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.RandomKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Map<EncryptionType, EncryptionKey> map0 = RandomKeyFactory.getRandomKeys();
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      RandomKeyFactory randomKeyFactory0 = new RandomKeyFactory();
  }
}
