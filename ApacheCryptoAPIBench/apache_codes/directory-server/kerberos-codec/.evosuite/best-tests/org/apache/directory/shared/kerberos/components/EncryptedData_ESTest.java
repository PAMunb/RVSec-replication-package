/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:42:54 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncryptedData_ESTest extends EncryptedData_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      encryptedData0.setKvno((-221));
      EncryptedData encryptedData1 = new EncryptedData();
      boolean boolean0 = encryptedData0.equals(encryptedData1);
      assertEquals((-221), encryptedData0.getKvno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, byteArray0);
      assertFalse(encryptedData0.hasKvno());
      
      encryptedData0.setKvno(0);
      int int0 = encryptedData0.computeLength();
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, (byte[]) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        encryptedData0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      encryptedData0.setKvno((byte)91);
      boolean boolean0 = encryptedData0.hasKvno();
      assertEquals(91, encryptedData0.getKvno());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      encryptedData0.setKvno((byte)91);
      int int0 = encryptedData0.getKvno();
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.NULL;
      byte[] byteArray0 = new byte[3];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      encryptedData0.getEType();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, (byte[]) null);
      encryptedData0.getEType();
      assertEquals((-1), encryptedData0.getKvno());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      EncryptionType encryptionType1 = EncryptionType.RC4_HMAC_OLD_EXP;
      encryptedData0.setEType(encryptionType1);
      encryptedData0.getEType();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      encryptedData0.getCipher();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      byte[] byteArray0 = new byte[0];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      encryptedData0.getCipher();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES_EDE3_CBC_ENV_OID;
      byte[] byteArray0 = new byte[3];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      // Undeclared exception!
      try { 
        encryptedData0.equals("<");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.apache.directory.shared.kerberos.components.EncryptedData
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(3193);
      // Undeclared exception!
      try { 
        encryptedData0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      // Undeclared exception!
      try { 
        encryptedData0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, (byte[]) null);
      String string0 = encryptedData0.toString("QHw %");
      assertEquals("QHw %EncryptedData : {\nQHw %    etype: des3-cbc-sha1 (7)\nQHw %    cipher: \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, byteArray0);
      assertFalse(encryptedData0.hasKvno());
      
      encryptedData0.setKvno(0);
      String string0 = encryptedData0.toString("\"9TdA:");
      assertEquals("\"9TdA:EncryptedData : {\n\"9TdA:    etype: rc4-hmac (23)\n\"9TdA:    kvno: 0\n\"9TdA:    cipher: 0x00 0x00 \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      encryptedData0.setKvno((-221));
      EncryptedData encryptedData1 = new EncryptedData();
      boolean boolean0 = encryptedData1.equals(encryptedData0);
      assertEquals((-221), encryptedData0.getKvno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      EncryptedData encryptedData1 = new EncryptedData(encryptionType0, (byte[]) null);
      boolean boolean0 = encryptedData0.equals(encryptedData1);
      assertFalse(encryptedData0.hasKvno());
      assertFalse(encryptedData1.hasKvno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      EncryptedData encryptedData0 = new EncryptedData();
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_EXP;
      EncryptedData encryptedData1 = new EncryptedData(encryptionType0, (-156), byteArray0);
      boolean boolean0 = encryptedData0.equals(encryptedData1);
      assertEquals((-1), encryptedData1.getKvno());
      assertFalse(boolean0);
      assertEquals((-1), encryptedData0.getKvno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      boolean boolean0 = encryptedData0.equals((Object) null);
      assertFalse(encryptedData0.hasKvno());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      boolean boolean0 = encryptedData0.equals(encryptedData0);
      assertTrue(boolean0);
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      EncryptedData encryptedData1 = new EncryptedData();
      boolean boolean0 = encryptedData1.equals(encryptedData0);
      assertTrue(boolean0);
      assertEquals((-1), encryptedData1.getKvno());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      encryptedData0.hashCode();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      encryptedData0.hashCode();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      try { 
        encryptedData0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RSAES_OAEP_ENV_OID;
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(373);
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 373, byteArray0);
      encryptedData0.encode(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=17 lim=373 cap=373]", byteBuffer0.toString());
      assertEquals(356, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      byte[] byteArray0 = new byte[6];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      int int0 = encryptedData0.computeLength();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 0, (byte[]) null);
      encryptedData0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        encryptedData0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES_EDE3_CBC_ENV_OID;
      byte[] byteArray0 = new byte[0];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 417, byteArray0);
      int int0 = encryptedData0.computeLength();
      assertEquals(417, encryptedData0.getKvno());
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      assertFalse(encryptedData0.hasKvno());
      
      encryptedData0.setKvno(0);
      int int0 = encryptedData0.getKvno();
      assertTrue(encryptedData0.hasKvno());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      int int0 = encryptedData0.getKvno();
      assertFalse(encryptedData0.hasKvno());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      EncryptionType encryptionType0 = EncryptionType.RC2CBC_ENVOID;
      encryptedData0.setEType(encryptionType0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(1264);
      encryptedData0.encode(byteBuffer0);
      assertEquals(11, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=11 lim=1264 cap=1264]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      byte[] byteArray0 = new byte[0];
      encryptedData0.setCipher(byteArray0);
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      encryptedData0.getEType();
      assertFalse(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      encryptedData0.setKvno(172);
      encryptedData0.toString();
      assertEquals(172, encryptedData0.getKvno());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      encryptedData0.getCipher();
      assertEquals((-1), encryptedData0.getKvno());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncryptedData encryptedData0 = new EncryptedData();
      boolean boolean0 = encryptedData0.hasKvno();
      assertFalse(boolean0);
  }
}
