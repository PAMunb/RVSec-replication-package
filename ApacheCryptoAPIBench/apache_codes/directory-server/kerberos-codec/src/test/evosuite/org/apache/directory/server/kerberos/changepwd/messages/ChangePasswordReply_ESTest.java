/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:39:34 GMT 2022
 */

package org.apache.directory.server.kerberos.changepwd.messages;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordReply;
import org.apache.directory.shared.kerberos.messages.ApRep;
import org.apache.directory.shared.kerberos.messages.KrbPriv;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChangePasswordReply_ESTest extends ChangePasswordReply_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply((ApRep) null, (KrbPriv) null);
      ApRep apRep0 = changePasswordReply0.getApplicationReply();
      assertNull(apRep0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ApRep apRep0 = mock(ApRep.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0, (ByteBuffer) null).when(apRep0).encode(any(java.nio.ByteBuffer.class));
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer1, (ByteBuffer) null).when(krbPriv0).encode(any(java.nio.ByteBuffer.class));
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply((short) (-3572), apRep0, krbPriv0);
      ByteBuffer byteBuffer2 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer3 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null, (ByteBuffer) null, (ByteBuffer) null).when(byteBuffer3).putShort(anyShort());
      doReturn("J)SE|J)}9^&0!").when(byteBuffer3).toString();
      ByteBuffer byteBuffer4 = changePasswordReply0.encode(byteBuffer3);
      ByteBuffer byteBuffer5 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer2, byteBuffer4).when(byteBuffer5).get(any(byte[].class));
      doReturn((short)6, (short)0, (short)0).when(byteBuffer5).getShort();
      doReturn(byteBuffer2, byteBuffer2, byteBuffer2).when(byteBuffer5).putShort(anyShort());
      doReturn("ERR_04273").when(byteBuffer5).toString();
      ByteBuffer byteBuffer6 = changePasswordReply0.encode(byteBuffer5);
      ChangePasswordReply changePasswordReply1 = ChangePasswordReply.decode(byteBuffer6);
      changePasswordReply1.getPrivateMessage();
      assertEquals((short)0, changePasswordReply1.getVersionNumber());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApRep apRep0 = mock(ApRep.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(apRep0).computeLength();
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(krbPriv0).computeLength();
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply(apRep0, krbPriv0);
      short short0 = changePasswordReply0.computeLength();
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply((ApRep) null, (KrbPriv) null);
      // Undeclared exception!
      try { 
        changePasswordReply0.encode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordReply", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0, (ByteBuffer) null).when(byteBuffer1).get(any(byte[].class));
      doReturn((short)894, (short)894, (short)1).when(byteBuffer1).getShort();
      try { 
        ChangePasswordReply.decode(byteBuffer1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Request failed due to being malformed.
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordReply", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        ChangePasswordReply.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordReply", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply((ApRep) null, (KrbPriv) null);
      // Undeclared exception!
      try { 
        changePasswordReply0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordReply", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ByteBuffer byteBuffer0 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      ApRep apRep0 = mock(ApRep.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer0).when(apRep0).encode(any(java.nio.ByteBuffer.class));
      ByteBuffer byteBuffer1 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn(byteBuffer1).when(krbPriv0).encode(any(java.nio.ByteBuffer.class));
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply((short) (-3572), apRep0, krbPriv0);
      ByteBuffer byteBuffer2 = mock(ByteBuffer.class, new ViolatedAssumptionAnswer());
      doReturn((ByteBuffer) null).when(byteBuffer2).get(any(byte[].class));
      doReturn((short)0, (short)0, (short)0).when(byteBuffer2).getShort();
      doReturn((ByteBuffer) null, (ByteBuffer) null, (ByteBuffer) null).when(byteBuffer2).putShort(anyShort());
      doReturn("J)SE|J)}9^&0!").when(byteBuffer2).toString();
      ByteBuffer byteBuffer3 = changePasswordReply0.encode(byteBuffer2);
      // Undeclared exception!
      try { 
        ChangePasswordReply.decode(byteBuffer3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.changepwd.messages.ChangePasswordReply", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ApRep apRep0 = mock(ApRep.class, new ViolatedAssumptionAnswer());
      doReturn((int)(short) (-3572)).when(apRep0).computeLength();
      KrbPriv krbPriv0 = mock(KrbPriv.class, new ViolatedAssumptionAnswer());
      doReturn(402).when(krbPriv0).computeLength();
      ChangePasswordReply changePasswordReply0 = new ChangePasswordReply((short) (-3572), apRep0, krbPriv0);
      short short0 = changePasswordReply0.computeLength();
      assertEquals((short) (-3164), short0);
  }
}
