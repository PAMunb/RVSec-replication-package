/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:43:50 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.LastReqType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.EncKdcRepPart;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.apache.directory.shared.kerberos.components.HostAddresses;
import org.apache.directory.shared.kerberos.components.LastReq;
import org.apache.directory.shared.kerberos.components.LastReqEntry;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.flags.TicketFlags;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class EncKdcRepPart_ESTest extends EncKdcRepPart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 279);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      LastReqType lastReqType0 = LastReqType.TIME_OF_INITIAL_REQ;
      MockDate mockDate0 = new MockDate(279, 279, 279, 473, 279);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      LastReqEntry lastReqEntry0 = new LastReqEntry(lastReqType0, kerberosTime0);
      lastReq0.addEntry(lastReqEntry0);
      encKdcRepPart0.setLastReq(lastReq0);
      // Undeclared exception!
      try { 
        encKdcRepPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
      try { 
        encKdcRepPart0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      MockDate mockDate0 = new MockDate((-1973), (-1973), (-1973));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      encKdcRepPart0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getStartTime();
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      encKdcRepPart0.setSRealm("ERR_04087");
      String string0 = encKdcRepPart0.getSRealm();
      assertEquals("ERR_04087", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      encKdcRepPart0.setSRealm("");
      String string0 = encKdcRepPart0.getSRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_X500_PRINCIPAL;
      PrincipalName principalName0 = new PrincipalName("ERR_37", principalNameType0);
      encKdcRepPart0.setSName(principalName0);
      PrincipalName principalName1 = encKdcRepPart0.getSName();
      assertEquals(PrincipalNameType.KRB_NT_X500_PRINCIPAL, principalName1.getNameType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      MockDate mockDate0 = new MockDate((-345L));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      encKdcRepPart0.setRenewTill(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getRenewTill();
      assertTrue(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime((-2377L));
      encKdcRepPart0.setRenewTill(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getRenewTill();
      assertEquals(86400000, KerberosTime.DAY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      encKdcRepPart0.setNonce(286);
      int int0 = encKdcRepPart0.getNonce();
      assertEquals(286, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      encKdcRepPart0.setNonce((-1946));
      int int0 = encKdcRepPart0.getNonce();
      assertEquals((-1946), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      encKdcRepPart0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = encKdcRepPart0.getKey();
      assertNull(encryptionKey1.getKeyType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionType encryptionType0 = EncryptionType.AES128_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, (-5));
      encryptionKey0.setKeyVersion(4944);
      encKdcRepPart0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = encKdcRepPart0.getKey();
      assertSame(encryptionKey1, encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      byte[] byteArray0 = new byte[8];
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, (-433));
      encKdcRepPart0.setKey(encryptionKey0);
      EncryptionKey encryptionKey1 = encKdcRepPart0.getKey();
      assertEquals(EncryptionType.RC4_MD4, encryptionKey1.getKeyType());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      encKdcRepPart0.setFlags((TicketFlags) null);
      TicketFlags ticketFlags0 = encKdcRepPart0.getFlags();
      assertNull(ticketFlags0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      TicketFlags ticketFlags0 = new TicketFlags(382);
      encKdcRepPart0.setFlags(ticketFlags0);
      TicketFlags ticketFlags1 = encKdcRepPart0.getFlags();
      assertFalse(ticketFlags1.isMayPosdate());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      HostAddresses hostAddresses0 = new HostAddresses();
      encKdcRepPart0.setClientAddresses(hostAddresses0);
      HostAddresses hostAddresses1 = encKdcRepPart0.getClientAddresses();
      assertSame(hostAddresses1, hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setAuthTime(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getAuthTime();
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionKey encryptionKey0 = new EncryptionKey();
      encKdcRepPart0.setKey(encryptionKey0);
      // Undeclared exception!
      try { 
        encKdcRepPart0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptionKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime((-2377L));
      encKdcRepPart0.setRenewTill(kerberosTime0);
      String string0 = encKdcRepPart0.toString();
      assertEquals("EncKdcRepPart : \n    key : null\n    last-req : null\n    nonce : 0\n    flags : \n    authtime : null\n    endtime : null\n    renew-till : 19691231235957Z\n    srealm : null\n    sname : null\n", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime((-2377L));
      encKdcRepPart0.setStartTime(kerberosTime0);
      String string0 = encKdcRepPart0.toString();
      assertEquals("EncKdcRepPart : \n    key : null\n    last-req : null\n    nonce : 0\n    flags : \n    authtime : null\n    starttime : 19691231235957Z\n    endtime : null\n    srealm : null\n    sname : null\n", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encKdcRepPart0.setKeyExpiration(kerberosTime0);
      String string0 = encKdcRepPart0.toString();
      assertEquals("EncKdcRepPart : \n    key : null\n    last-req : null\n    nonce : 0\n    key-expiration : 2922789940817071255Z\n    flags : \n    authtime : null\n    endtime : null\n    srealm : null\n    sname : null\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      PrincipalName principalName0 = new PrincipalName("a*3?ydt[Uhx|g", (-3));
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setAuthTime(kerberosTime0);
      encKdcRepPart0.setSName(principalName0);
      encKdcRepPart0.setSRealm("a*3?ydt[Uhx|g");
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_MD5;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 86400000);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setLastReq(lastReq0);
      HostAddresses hostAddresses0 = new HostAddresses();
      encKdcRepPart0.setClientAddresses(hostAddresses0);
      encKdcRepPart0.computeLength();
      encKdcRepPart0.setEndTime(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3060);
      ByteBuffer byteBuffer1 = encKdcRepPart0.encode(byteBuffer0);
      assertEquals("java.nio.DirectByteBuffer[pos=120 lim=3060 cap=3060]", byteBuffer0.toString());
      assertEquals(2940, byteBuffer1.remaining());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      PrincipalName principalName0 = new PrincipalName("ae*3?ydt[Uhx|g", (-3));
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setAuthTime(kerberosTime0);
      encKdcRepPart0.setSName(principalName0);
      encKdcRepPart0.setSRealm("ae*3?ydt[Uhx|g");
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 1985);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setLastReq(lastReq0);
      encKdcRepPart0.setEndTime(kerberosTime0);
      encKdcRepPart0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(138);
      encKdcRepPart0.encode(byteBuffer0);
      assertEquals(118, byteBuffer0.position());
      assertEquals(20, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setAuthTime(kerberosTime0);
      encKdcRepPart0.setRenewTill(kerberosTime0);
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 86400000);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setLastReq(lastReq0);
      encKdcRepPart0.setEndTime(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(86400000);
      // Undeclared exception!
      try { 
        encKdcRepPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setAuthTime(kerberosTime0);
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 1985);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setStartTime(kerberosTime0);
      encKdcRepPart0.setLastReq(lastReq0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(138);
      // Undeclared exception!
      try { 
        encKdcRepPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 86400000);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setLastReq(lastReq0);
      encKdcRepPart0.setKeyExpiration(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(86400000);
      // Undeclared exception!
      try { 
        encKdcRepPart0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      try { 
        encKdcRepPart0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_CRC;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, (-94));
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      encKdcRepPart0.setRenewTill(kerberosTime0);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setLastReq(lastReq0);
      // Undeclared exception!
      try { 
        encKdcRepPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, (byte[]) null, 1985);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setStartTime(kerberosTime0);
      encKdcRepPart0.setLastReq(lastReq0);
      // Undeclared exception!
      try { 
        encKdcRepPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      byte[] byteArray0 = new byte[7];
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      EncryptionKey encryptionKey0 = new EncryptionKey(encryptionType0, byteArray0, 1644);
      encKdcRepPart0.setKey(encryptionKey0);
      LastReq lastReq0 = new LastReq();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setKeyExpiration(kerberosTime0);
      encKdcRepPart0.setLastReq(lastReq0);
      // Undeclared exception!
      try { 
        encKdcRepPart0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncKdcRepPart", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setKeyExpiration(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getKeyExpiration();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = encKdcRepPart0.getKeyExpiration();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = encKdcRepPart0.getRenewTill();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setStartTime(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getStartTime();
      assertEquals("20140214202121Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      TicketFlags ticketFlags0 = new TicketFlags((-86));
      encKdcRepPart0.setFlags(ticketFlags0);
      TicketFlags ticketFlags1 = encKdcRepPart0.getFlags();
      assertTrue(ticketFlags1.isForwardable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setEndTime(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getEndTime();
      assertEquals(60000, KerberosTime.MINUTE);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      PrincipalName principalName0 = encKdcRepPart0.getSName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      LastReq lastReq0 = encKdcRepPart0.getLastReq();
      assertNull(lastReq0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      HostAddresses hostAddresses0 = new HostAddresses();
      encKdcRepPart0.setClientAddresses(hostAddresses0);
      String string0 = encKdcRepPart0.toString();
      assertEquals("EncKdcRepPart : \n    key : null\n    last-req : null\n    nonce : 0\n    flags : \n    authtime : null\n    endtime : null\n    srealm : null\n    sname : null\n    caddr : \n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = encKdcRepPart0.getEndTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      String string0 = encKdcRepPart0.getSRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      HostAddresses hostAddresses0 = encKdcRepPart0.getClientAddresses();
      assertNull(hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = encKdcRepPart0.getAuthTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = encKdcRepPart0.getStartTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      LastReq lastReq0 = new LastReq();
      encKdcRepPart0.setLastReq(lastReq0);
      LastReq lastReq1 = encKdcRepPart0.getLastReq();
      assertSame(lastReq1, lastReq0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      EncryptionKey encryptionKey0 = encKdcRepPart0.getKey();
      assertNull(encryptionKey0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      KerberosTime kerberosTime0 = new KerberosTime();
      encKdcRepPart0.setRenewTill(kerberosTime0);
      KerberosTime kerberosTime1 = encKdcRepPart0.getRenewTill();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      int int0 = encKdcRepPart0.getNonce();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      TicketFlags ticketFlags0 = encKdcRepPart0.getFlags();
      assertFalse(ticketFlags0.isForwardable());
  }
}
