/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:20:46 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.crypto.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Map;
import java.util.Set;
import org.apache.directory.server.kerberos.shared.crypto.encryption.KerberosKeyFactory;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KerberosKeyFactory_ESTest extends KerberosKeyFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      EncryptionKey encryptionKey0 = KerberosKeyFactory.string2Key("6#e$+z+d'q@UeE<", "6#e$+z+d'q@UeE<", encryptionType0);
      assertEquals(0, encryptionKey0.getKeyVersion());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Map<EncryptionType, EncryptionKey> map0 = KerberosKeyFactory.getKerberosKeys("%Ra$NXM7>_{@*b", "");
      assertEquals(5, map0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD;
      // Undeclared exception!
      try { 
        KerberosKeyFactory.string2Key("e\br+@.", (String) null, encryptionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.KerberosKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RSAENCRYPTION_ENVOID;
      // Undeclared exception!
      try { 
        KerberosKeyFactory.string2Key("D?flt;f#!}m1V<27@g", "D?flt;f#!}m1V<27@g", encryptionType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown algorithm name for the encryption type rsaEncryption-EnvOID (13)
         //
         verifyException("org.apache.directory.shared.kerberos.KerberosUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosKeyFactory.getKerberosKeys("", "", (Set<EncryptionType>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.KerberosKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      // Undeclared exception!
      try { 
        KerberosKeyFactory.string2Key("F{w%h1P(EZs*vb%6", "F{w%h1P(EZs*vb%6", encryptionType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // KrbException: Cannot locate default realm
         //
         verifyException("javax.security.auth.kerberos.KerberosPrincipal", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Map<EncryptionType, EncryptionKey> map0 = KerberosKeyFactory.getKerberosKeys((String) null, (String) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try { 
        KerberosKeyFactory.getKerberosKeys("YarO?4@l%;P6", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.KerberosKeyFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      KerberosKeyFactory kerberosKeyFactory0 = new KerberosKeyFactory();
  }
}
