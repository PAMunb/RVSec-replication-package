/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:41:44 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.types.HostAddrType;
import org.apache.directory.shared.kerberos.components.HostAddress;
import org.apache.directory.shared.kerberos.components.KrbSafeBody;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KrbSafeBody_ESTest extends KrbSafeBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[4];
      HostAddrType hostAddrType0 = HostAddrType.NULL;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setRecipientAddress(hostAddress0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      krbSafeBody0.setUserData(byteArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(44);
      ByteBuffer byteBuffer1 = krbSafeBody0.encode(byteBuffer0);
      try { 
        krbSafeBody0.encode(byteBuffer1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbSafeBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[0];
      krbSafeBody0.setUserData(byteArray0);
      byte[] byteArray1 = krbSafeBody0.getUserData();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setUsec(548);
      int int0 = krbSafeBody0.getUsec();
      assertEquals(548, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      MockDate mockDate0 = new MockDate(0L);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbSafeBody0.setTimestamp(kerberosTime0);
      KerberosTime kerberosTime1 = krbSafeBody0.getTimestamp();
      assertEquals("19700101000000Z", kerberosTime1.getDate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbSafeBody0.setTimestamp(kerberosTime0);
      KerberosTime kerberosTime1 = krbSafeBody0.getTimestamp();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      krbSafeBody0.setTimestamp(kerberosTime0);
      KerberosTime kerberosTime1 = krbSafeBody0.getTimestamp();
      assertEquals((-2209075200000L), kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setSeqNumber(217);
      int int0 = krbSafeBody0.getSeqNumber();
      assertEquals(217, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_XNS;
      byte[] byteArray0 = new byte[8];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      HostAddress hostAddress1 = krbSafeBody0.getSenderAddress();
      assertSame(hostAddress1, hostAddress0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_XNS;
      byte[] byteArray0 = new byte[2];
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setRecipientAddress(hostAddress0);
      HostAddress hostAddress1 = krbSafeBody0.getRecipientAddress();
      assertSame(hostAddress1, hostAddress0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      // Undeclared exception!
      try { 
        krbSafeBody0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbSafeBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      HostAddress hostAddress0 = new HostAddress();
      krbSafeBody0.setRecipientAddress(hostAddress0);
      String string0 = krbSafeBody0.toString();
      assertEquals("KRB-SAFE-BODY : {\n    user-data: \n    s-address: null\n    r-address: Unknow host : \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setSeqNumber((-1589));
      String string0 = krbSafeBody0.toString();
      assertEquals("KRB-SAFE-BODY : {\n    user-data: \n    seq-number: -1589\n    s-address: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setUsec(0);
      String string0 = krbSafeBody0.toString();
      assertEquals("KRB-SAFE-BODY : {\n    user-data: \n    usec: 0\n    s-address: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbSafeBody0.setTimestamp(kerberosTime0);
      String string0 = krbSafeBody0.toString();
      assertEquals("KRB-SAFE-BODY : {\n    user-data: \n    timestamp: 2922789940817071255Z\n    s-address: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[4];
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(32);
      krbSafeBody0.encode(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=23 lim=32 cap=32]", byteBuffer0.toString());
      assertEquals(9, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setUsec(0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(32);
      // Undeclared exception!
      try { 
        krbSafeBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbSafeBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      try { 
        krbSafeBody0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbSafeBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[4];
      HostAddrType hostAddrType0 = HostAddrType.NULL;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      krbSafeBody0.setUserData(byteArray0);
      krbSafeBody0.setRecipientAddress(hostAddress0);
      int int0 = krbSafeBody0.computeLength();
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[1];
      krbSafeBody0.setSeqNumber(3215);
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_IMPLINK;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      krbSafeBody0.setUserData(byteArray0);
      int int0 = krbSafeBody0.computeLength();
      assertEquals(3215, krbSafeBody0.getSeqNumber());
      assertEquals(27, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setUsec(0);
      byte[] byteArray0 = new byte[4];
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET;
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setUserData(byteArray0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      int int0 = krbSafeBody0.computeLength();
      assertEquals(32, int0);
      assertEquals(0, krbSafeBody0.getUsec());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[1];
      HostAddrType hostAddrType0 = HostAddrType.ADDRTYPE_INET;
      KerberosTime kerberosTime0 = new KerberosTime();
      krbSafeBody0.setTimestamp(kerberosTime0);
      HostAddress hostAddress0 = new HostAddress(hostAddrType0, byteArray0);
      krbSafeBody0.setSenderAddress(hostAddress0);
      krbSafeBody0.setUserData(byteArray0);
      int int0 = krbSafeBody0.computeLength();
      assertEquals(40, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      int int0 = krbSafeBody0.getSeqNumber();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setSeqNumber((-3599));
      int int0 = krbSafeBody0.getSeqNumber();
      assertEquals((-3599), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      int int0 = krbSafeBody0.getUsec();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setUsec((-445));
      int int0 = krbSafeBody0.getUsec();
      assertEquals((-445), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = new byte[4];
      krbSafeBody0.setUserData(byteArray0);
      byte[] byteArray1 = krbSafeBody0.getUserData();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      HostAddress hostAddress0 = krbSafeBody0.getRecipientAddress();
      assertNull(hostAddress0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      krbSafeBody0.setTimestamp(kerberosTime0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(60000);
      // Undeclared exception!
      try { 
        krbSafeBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbSafeBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      HostAddress hostAddress0 = krbSafeBody0.getSenderAddress();
      assertNull(hostAddress0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      KerberosTime kerberosTime0 = krbSafeBody0.getTimestamp();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      krbSafeBody0.setSeqNumber((byte)41);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)41);
      // Undeclared exception!
      try { 
        krbSafeBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KrbSafeBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KrbSafeBody krbSafeBody0 = new KrbSafeBody();
      byte[] byteArray0 = krbSafeBody0.getUserData();
      assertNull(byteArray0);
  }
}
