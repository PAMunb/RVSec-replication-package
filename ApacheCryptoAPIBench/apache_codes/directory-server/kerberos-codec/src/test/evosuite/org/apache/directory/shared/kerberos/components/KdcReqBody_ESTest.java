/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:29:49 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.apache.directory.shared.kerberos.KerberosTime;
import org.apache.directory.shared.kerberos.codec.options.KdcOptions;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PrincipalNameType;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.HostAddress;
import org.apache.directory.shared.kerberos.components.HostAddresses;
import org.apache.directory.shared.kerberos.components.KdcReqBody;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.messages.Ticket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KdcReqBody_ESTest extends KdcReqBody_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = new PrincipalName();
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_X500_PRINCIPAL;
      principalName0.setNameType(principalNameType0);
      kdcReqBody0.setSName(principalName0);
      String string0 = kdcReqBody0.toString("S4Wg*@Ezs");
      assertEquals("S4Wg*@Ezsrealm : null\nS4Wg*@Ezssname : { name-type: KRB_NT_X500_PRINCIPAL no name-string }\nS4Wg*@Ezstill : null\nS4Wg*@Ezsnonce : 0\nS4Wg*@Ezsetype : ", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = new PrincipalName();
      principalName0.setNameType(1611);
      kdcReqBody0.setCName(principalName0);
      String string0 = kdcReqBody0.toString("H9");
      assertEquals("H9cname : { name-type: KRB_NT_UNKNOWN no name-string }\nH9realm : null\nH9till : null\nH9nonce : 0\nH9etype : ", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions((byte[]) null);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      String string0 = kdcReqBody0.toString(";Q");
      assertEquals(";Qrealm : null\n;Qtill : null\n;Qnonce : 0\n;Qetype : ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setRealm("$F8c R36J1tA^J&z%");
      byte[] byteArray0 = new byte[9];
      KdcOptions kdcOptions0 = new KdcOptions(byteArray0);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      int int0 = kdcReqBody0.computeLength();
      assertEquals(64, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      byte[] byteArray0 = new byte[7];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      kdcReqBody0.setEncAuthorizationData(encryptedData0);
      int int0 = kdcReqBody0.computeLength();
      assertEquals(63, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      byte[] byteArray0 = new byte[3];
      KdcOptions kdcOptions0 = new KdcOptions(byteArray0);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      String[] stringArray0 = new String[4];
      PrincipalName principalName0 = new PrincipalName(stringArray0, 2055);
      kdcReqBody0.setCName(principalName0);
      int int0 = kdcReqBody0.computeLength();
      assertEquals(62, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime(0L);
      kdcReqBody0.setTill(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getTill();
      assertTrue(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      MockDate mockDate0 = new MockDate();
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      kdcReqBody0.setTill(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getTill();
      assertEquals(86400000, KerberosTime.DAY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime((-2106L));
      kdcReqBody0.setTill(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getTill();
      assertFalse(kerberosTime1.isZero());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = new PrincipalName();
      kdcReqBody0.setSName(principalName0);
      PrincipalName principalName1 = kdcReqBody0.getSName();
      assertNull(principalName1.getNameType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setRealm("$F8c R36J1tA^J&z%");
      String string0 = kdcReqBody0.getRealm();
      assertEquals("$F8c R36J1tA^J&z%", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setRealm("");
      String string0 = kdcReqBody0.getRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      kdcReqBody0.setRtime(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getRTime();
      assertEquals(9223372036854775000L, kerberosTime1.getTime());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime((-2478L));
      kdcReqBody0.setRtime(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getRTime();
      assertEquals(604800000, KerberosTime.WEEK);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setNonce((-93));
      int int0 = kdcReqBody0.getNonce();
      assertEquals((-93), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      byte[] byteArray0 = new byte[1];
      kdcOptions0.setData(byteArray0);
      KdcOptions kdcOptions1 = kdcReqBody0.getKdcOptions();
      assertEquals(29, KdcOptions.RESERVED_29);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions((byte[]) null);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      KdcOptions kdcOptions1 = kdcReqBody0.getKdcOptions();
      assertEquals(31, KdcOptions.VALIDATE);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-65);
      KdcOptions kdcOptions0 = new KdcOptions(byteArray0);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      KdcOptions kdcOptions1 = kdcReqBody0.getKdcOptions();
      assertEquals(29, KdcOptions.RESERVED_29);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcOptions0.setData((-1048));
      KdcOptions kdcOptions1 = kdcReqBody0.getKdcOptions();
      assertEquals(0, KdcOptions.RESERVED_0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      kdcReqBody0.setFrom(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getFrom();
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      MockDate mockDate0 = new MockDate(10, (-89), 378, 24, 24, (-90));
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      kdcReqBody0.setFrom(kerberosTime0);
      KerberosTime kerberosTime1 = kdcReqBody0.getFrom();
      assertSame(kerberosTime1, kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      byte[] byteArray0 = new byte[5];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 3098, byteArray0);
      kdcReqBody0.setEncAuthorizationData(encryptedData0);
      EncryptedData encryptedData1 = kdcReqBody0.getEncAuthorizationData();
      assertTrue(encryptedData1.hasKvno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptionType encryptionType0 = EncryptionType.DES_EDE3_CBC_ENV_OID;
      byte[] byteArray0 = new byte[1];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, (-1), byteArray0);
      kdcReqBody0.setEncAuthorizationData(encryptedData0);
      EncryptedData encryptedData1 = kdcReqBody0.getEncAuthorizationData();
      assertSame(encryptedData1, encryptedData0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setEType((Set<EncryptionType>) null);
      Set<EncryptionType> set0 = kdcReqBody0.getEType();
      assertNull(set0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = new PrincipalName();
      kdcReqBody0.setCName(principalName0);
      PrincipalName principalName1 = kdcReqBody0.getCName();
      assertSame(principalName1, principalName0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      HostAddresses hostAddresses0 = new HostAddresses();
      kdcReqBody0.setAddresses(hostAddresses0);
      HostAddresses hostAddresses1 = kdcReqBody0.getAddresses();
      assertSame(hostAddresses1, hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      LinkedList<Ticket> linkedList0 = new LinkedList<Ticket>();
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket(867, (PrincipalName) null, encryptedData0);
      linkedList0.add(ticket0);
      kdcReqBody0.setAdditionalTickets(linkedList0);
      Ticket[] ticketArray0 = kdcReqBody0.getAdditionalTickets();
      assertEquals(1, ticketArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      byte[] byteArray0 = new byte[4];
      kdcOptions0.setData(byteArray0);
      // Undeclared exception!
      try { 
        kdcReqBody0.toString("4^-#{zqm|E'/M}.");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      byte[] byteArray0 = new byte[2];
      KdcOptions kdcOptions0 = new KdcOptions(byteArray0);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      // Undeclared exception!
      try { 
        kdcReqBody0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.codec.options.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptionType encryptionType0 = EncryptionType.RESERVED6;
      byte[] byteArray0 = new byte[7];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      kdcReqBody0.setEncAuthorizationData(encryptedData0);
      String string0 = kdcReqBody0.toString("POSTDATED ");
      assertEquals("POSTDATED realm : null\nPOSTDATED till : null\nPOSTDATED nonce : 0\nPOSTDATED etype : \nPOSTDATED enc-authorization-dataEncryptedData : {\n    etype: [reserved] (6)\n    cipher: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime();
      kdcReqBody0.setFrom(kerberosTime0);
      String string0 = kdcReqBody0.toString("realm : null\nfrom : 20140214202121Z\ntill : 20140214202121Z\nnonce : 0\netype : des-cbc-md4 (2)");
      assertEquals("realm : null\nfrom : 20140214202121Z\ntill : 20140214202121Z\nnonce : 0\netype : des-cbc-md4 (2)realm : null\nrealm : null\nfrom : 20140214202121Z\ntill : 20140214202121Z\nnonce : 0\netype : des-cbc-md4 (2)from : 20140214202121Z\nrealm : null\nfrom : 20140214202121Z\ntill : 20140214202121Z\nnonce : 0\netype : des-cbc-md4 (2)till : null\nrealm : null\nfrom : 20140214202121Z\ntill : 20140214202121Z\nnonce : 0\netype : des-cbc-md4 (2)nonce : 0\nrealm : null\nfrom : 20140214202121Z\ntill : 20140214202121Z\nnonce : 0\netype : des-cbc-md4 (2)etype : ", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = new PrincipalName();
      kdcReqBody0.setSName(principalName0);
      // Undeclared exception!
      try { 
        kdcReqBody0.toString("S4Wg*@Ezs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      Ticket ticket0 = new Ticket();
      kdcReqBody0.addAdditionalTicket(ticket0);
      kdcReqBody0.addAdditionalTicket(ticket0);
      String string0 = kdcReqBody0.toString("~A'");
      assertEquals("~A'realm : null\n~A'till : null\n~A'nonce : 0\n~A'etype : \n~A'Tickets : \n~A'    Ticket :\n~A'      tkt-vno : 5\n~A'      realm : null\n~A'      sname : null\n~A'      enc-part : null\n~A'    Ticket :\n~A'      tkt-vno : 5\n~A'      realm : null\n~A'      sname : null\n~A'      enc-part : null\n", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      Ticket ticket0 = new Ticket();
      kdcReqBody0.addAdditionalTicket(ticket0);
      String string0 = kdcReqBody0.toString();
      assertEquals("realm : null\ntill : null\nnonce : 0\netype : \nTickets : \n    Ticket :\n      tkt-vno : 5\n      realm : null\n      sname : null\n      enc-part : null\n", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      HostAddress[] hostAddressArray0 = new HostAddress[7];
      HostAddresses hostAddresses0 = new HostAddresses(hostAddressArray0);
      kdcReqBody0.setAddresses(hostAddresses0);
      String string0 = kdcReqBody0.toString("jc@6;8yz;`");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptionType encryptionType0 = EncryptionType.RESERVED4;
      kdcReqBody0.addEType(encryptionType0);
      EncryptionType encryptionType1 = EncryptionType.RC4_HMAC_EXP;
      kdcReqBody0.addEType(encryptionType1);
      String string0 = kdcReqBody0.toString("HF-p\"W<5'-qw=,");
      assertEquals("HF-p\"W<5'-qw=,realm : null\nHF-p\"W<5'-qw=,till : null\nHF-p\"W<5'-qw=,nonce : 0\nHF-p\"W<5'-qw=,etype : [reserved] (4) rc4-hmac-exp (24)", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      MockDate mockDate0 = new MockDate(657, 72, 657, 657, 2449, 72);
      KerberosTime kerberosTime0 = new KerberosTime(mockDate0);
      kdcReqBody0.setRtime(kerberosTime0);
      String string0 = kdcReqBody0.toString("DxV&@x'h");
      assertEquals("DxV&@x'hrealm : null\nDxV&@x'htill : null\nDxV&@x'hrtime : 25641116015012Z\nDxV&@x'hnonce : 0\nDxV&@x'hetype : ", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = new PrincipalName();
      kdcReqBody0.setSName(principalName0);
      // Undeclared exception!
      try { 
        kdcReqBody0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      byte[] byteArray0 = new byte[1];
      kdcOptions0.setData(byteArray0);
      String string0 = kdcReqBody0.toString("KDCOptions : ");
      assertEquals("KDCOptions : realm : null\nKDCOptions : till : null\nKDCOptions : nonce : 0\nKDCOptions : etype : ", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      String string0 = kdcReqBody0.toString("KDCOptions : ");
      assertEquals("KDCOptions : KDCOptions : DISABLE_TRANSISTED_CHECKED\nKDCOptions : realm : null\nKDCOptions : till : null\nKDCOptions : nonce : 0\nKDCOptions : etype : ", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime();
      kdcReqBody0.setTill(kerberosTime0);
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.computeLength();
      kdcReqBody0.addAdditionalTicket((Ticket) null);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(60000);
      // Undeclared exception!
      try { 
        kdcReqBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcReqBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime();
      kdcReqBody0.setTill(kerberosTime0);
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.computeLength();
      EncryptedData encryptedData0 = new EncryptedData();
      kdcReqBody0.setEncAuthorizationData(encryptedData0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(146);
      // Undeclared exception!
      try { 
        kdcReqBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.EncryptedData", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime();
      kdcReqBody0.setTill(kerberosTime0);
      HostAddresses hostAddresses0 = new HostAddresses();
      kdcReqBody0.setAddresses(hostAddresses0);
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(47);
      ByteBuffer byteBuffer1 = kdcReqBody0.encode(byteBuffer0);
      assertFalse(byteBuffer1.isDirect());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime();
      kdcReqBody0.setTill(kerberosTime0);
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.computeLength();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      kdcReqBody0.addEType(encryptionType0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2763);
      kdcReqBody0.encode(byteBuffer0);
      assertEquals(2717, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=46 lim=2763 cap=2763]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = new KerberosTime();
      kdcReqBody0.setTill(kerberosTime0);
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setRtime(kerberosTime0);
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2006);
      kdcReqBody0.encode(byteBuffer0);
      assertEquals("java.nio.HeapByteBuffer[pos=62 lim=2006 cap=2006]", byteBuffer0.toString());
      assertEquals(1944, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      PrincipalName principalName0 = new PrincipalName();
      kdcReqBody0.setCName(principalName0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(18);
      // Undeclared exception!
      try { 
        kdcReqBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.PrincipalName", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      try { 
        kdcReqBody0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcReqBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      KdcOptions kdcOptions0 = new KdcOptions();
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      LinkedList<Ticket> linkedList0 = new LinkedList<Ticket>();
      PrincipalName principalName0 = new PrincipalName("", 9);
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      byte[] byteArray0 = new byte[6];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket(12, principalName0, encryptedData0);
      linkedList0.add(ticket0);
      kdcReqBody0.setAdditionalTickets(linkedList0);
      int int0 = kdcReqBody0.computeLength();
      assertEquals(92, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.addAdditionalTicket((Ticket) null);
      // Undeclared exception!
      try { 
        kdcReqBody0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcReqBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD4;
      kdcReqBody0.addEType(encryptionType0);
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      int int0 = kdcReqBody0.computeLength();
      assertEquals(46, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = KerberosTime.INFINITY;
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      kdcReqBody0.setFrom(kerberosTime0);
      kdcReqBody0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(25);
      // Undeclared exception!
      try { 
        kdcReqBody0.encode(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = new KdcOptions();
      kdcReqBody0.setKdcOptions(kdcOptions0);
      PrincipalNameType principalNameType0 = PrincipalNameType.KRB_NT_ENTERPRISE;
      PrincipalName principalName0 = new PrincipalName("ERR_04039", principalNameType0);
      kdcReqBody0.setSName(principalName0);
      kdcReqBody0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(67);
      // Undeclared exception!
      try { 
        kdcReqBody0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcReqBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = kdcReqBody0.getCName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      int int0 = kdcReqBody0.getNonce();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setNonce(391);
      int int0 = kdcReqBody0.getNonce();
      assertEquals(391, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KdcOptions kdcOptions0 = kdcReqBody0.getKdcOptions();
      assertNull(kdcOptions0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setAdditionalTickets((List<Ticket>) null);
      // Undeclared exception!
      try { 
        kdcReqBody0.getAdditionalTickets();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcReqBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      String string0 = kdcReqBody0.getRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = kdcReqBody0.getRTime();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      Ticket[] ticketArray0 = kdcReqBody0.getAdditionalTickets();
      assertEquals(0, ticketArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      HostAddresses hostAddresses0 = kdcReqBody0.getAddresses();
      assertNull(hostAddresses0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = kdcReqBody0.getTill();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      kdcReqBody0.setEType((Set<EncryptionType>) null);
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      // Undeclared exception!
      try { 
        kdcReqBody0.addEType(encryptionType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcReqBody", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptionType encryptionType0 = EncryptionType.SHA1WITHRSAENCRYPTION_CMSOID;
      kdcReqBody0.addEType(encryptionType0);
      Set<EncryptionType> set0 = kdcReqBody0.getEType();
      assertTrue(set0.contains(encryptionType0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      Set<EncryptionType> set0 = kdcReqBody0.getEType();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      KerberosTime kerberosTime0 = kdcReqBody0.getFrom();
      assertNull(kerberosTime0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      PrincipalName principalName0 = kdcReqBody0.getSName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      KdcReqBody kdcReqBody0 = new KdcReqBody();
      EncryptedData encryptedData0 = kdcReqBody0.getEncAuthorizationData();
      assertNull(encryptedData0);
  }
}
