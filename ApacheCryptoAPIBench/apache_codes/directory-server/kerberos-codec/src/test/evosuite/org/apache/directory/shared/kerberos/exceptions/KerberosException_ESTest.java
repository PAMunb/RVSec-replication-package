/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:24:25 GMT 2022
 */

package org.apache.directory.shared.kerberos.exceptions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.shared.kerberos.exceptions.ErrorType;
import org.apache.directory.shared.kerberos.exceptions.KerberosException;
import org.apache.directory.shared.kerberos.messages.KrbError;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KerberosException_ESTest extends KerberosException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      KerberosException kerberosException0 = new KerberosException((-2034), "D");
      KerberosException kerberosException1 = new KerberosException(0, "D", byteArray0, kerberosException0);
      byte[] byteArray1 = kerberosException1.getExplanatoryData();
      assertSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      KerberosException kerberosException0 = new KerberosException(59, "", byteArray0);
      byte[] byteArray1 = kerberosException0.getExplanatoryData();
      assertSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ErrorType errorType0 = mock(ErrorType.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(errorType0).getValue();
      KerberosException kerberosException0 = new KerberosException(errorType0, "");
      int int0 = kerberosException0.getErrorCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      ErrorType errorType0 = ErrorType.KRB_ERR_REVOCATION_STATUS_UNAVAILABLE;
      krbError0.setErrorCode(errorType0);
      KerberosException kerberosException0 = new KerberosException(krbError0);
      KrbError krbError1 = kerberosException0.getError();
      assertSame(krbError1, krbError0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KerberosException kerberosException0 = null;
      try {
        kerberosException0 = new KerberosException((ErrorType) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KerberosException kerberosException0 = new KerberosException((-331), "ERR_651");
      KerberosException kerberosException1 = null;
      try {
        kerberosException1 = new KerberosException((ErrorType) null, kerberosException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockThrowable mockThrowable0 = new MockThrowable((Throwable) null);
      KerberosException kerberosException0 = null;
      try {
        kerberosException0 = new KerberosException((ErrorType) null, "KrbError initial value : {}", mockThrowable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KerberosException kerberosException0 = null;
      try {
        kerberosException0 = new KerberosException((ErrorType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ErrorType errorType0 = ErrorType.KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED;
      KerberosException kerberosException0 = new KerberosException((-917), "\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n");
      KerberosException kerberosException1 = new KerberosException(errorType0, "T(KZq/t@gYK%xSX", kerberosException0);
      int int0 = kerberosException1.getErrorCode();
      assertEquals(78, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ErrorType errorType0 = ErrorType.KRB_ERR_CERTIFICATE_MISMATCH;
      KerberosException kerberosException0 = new KerberosException(errorType0, (byte[]) null, (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KerberosException kerberosException0 = new KerberosException((-2034), "D");
      byte[] byteArray0 = kerberosException0.getExplanatoryData();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KerberosException kerberosException0 = null;
      try {
        kerberosException0 = new KerberosException((ErrorType) null, "org.apache.directory.shared.kerberos.exceptions.KerberosException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KerberosException kerberosException0 = new KerberosException(0, "", (Throwable) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KrbError krbError0 = new KrbError();
      KerberosException kerberosException0 = null;
      try {
        kerberosException0 = new KerberosException(krbError0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.exceptions.KerberosException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ErrorType errorType0 = ErrorType.KDC_ERR_NULL_KEY;
      KerberosException kerberosException0 = new KerberosException(errorType0, byteArray0);
      KerberosException kerberosException1 = new KerberosException(4034, "", byteArray0, kerberosException0);
      assertFalse(kerberosException1.equals((Object)kerberosException0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KerberosException kerberosException0 = new KerberosException((-917), "\nKRB-ERROR : {\n    pvno: 5\n    msgType: KRB_ERROR\n    sTime: null\n    susec: 0\n    errorCode: null\n    realm: null\n    sName: null\n}\n");
      int int0 = kerberosException0.getErrorCode();
      assertEquals((-917), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ErrorType errorType0 = ErrorType.KDC_ERR_SERVICE_REVOKED;
      KerberosException kerberosException0 = new KerberosException(errorType0);
      KrbError krbError0 = kerberosException0.getError();
      assertNull(krbError0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ErrorType errorType0 = ErrorType.KDC_ERR_SERVICE_REVOKED;
      KerberosException kerberosException0 = new KerberosException(errorType0);
      KerberosException kerberosException1 = new KerberosException(errorType0, kerberosException0);
      assertFalse(kerberosException1.equals((Object)kerberosException0));
  }
}
