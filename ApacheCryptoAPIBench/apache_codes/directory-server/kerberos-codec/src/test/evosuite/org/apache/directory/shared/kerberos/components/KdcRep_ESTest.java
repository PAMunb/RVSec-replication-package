/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:47:48 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.util.List;
import org.apache.directory.shared.kerberos.KerberosMessageType;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.codec.types.PaDataType;
import org.apache.directory.shared.kerberos.components.EncKdcRepPart;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.KdcRep;
import org.apache.directory.shared.kerberos.components.PaData;
import org.apache.directory.shared.kerberos.components.PrincipalName;
import org.apache.directory.shared.kerberos.messages.Ticket;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KdcRep_ESTest extends KdcRep_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.AS_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      String[] stringArray0 = new String[2];
      PrincipalName principalName0 = new PrincipalName(stringArray0, (-784));
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC_OLD_EXP;
      byte[] byteArray0 = new byte[9];
      kdcRep0.setCName(principalName0);
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket(principalName0, encryptedData0);
      kdcRep0.setTicket(ticket0);
      // Undeclared exception!
      try { 
        kdcRep0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptedData encryptedData0 = new EncryptedData();
      kdcRep0.setEncPart(encryptedData0);
      Ticket ticket0 = new Ticket();
      kdcRep0.setTicket(ticket0);
      String string0 = kdcRep0.toString("F?4(gVMe9{m#v|L:1Db");
      assertEquals("F?4(gVMe9{m#v|L:1Db\n>-------------------------------------------------------------------------------\nF?4(gVMe9{m#v|L:1DbKdcRep : Unknown\nF?4(gVMe9{m#v|L:1Dbpvno : 5\nF?4(gVMe9{m#v|L:1Dbmsg-type : TGS_REQ\nF?4(gVMe9{m#v|L:1Dbcrealm : null\nF?4(gVMe9{m#v|L:1Dbcname : null\nF?4(gVMe9{m#v|L:1DbTicket :\nF?4(gVMe9{m#v|L:1Db  tkt-vno : 5\nF?4(gVMe9{m#v|L:1Db  realm : null\nF?4(gVMe9{m#v|L:1Db  sname : null\nF?4(gVMe9{m#v|L:1Db  enc-part : null\nF?4(gVMe9{m#v|L:1DbEncryptedData : {\nF?4(gVMe9{m#v|L:1Db    etype: null\nF?4(gVMe9{m#v|L:1Db    cipher: \n}\nF?4(gVMe9{m#v|L:1Db\n-------------------------------------------------------------------------------<\n", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptedData encryptedData0 = new EncryptedData();
      kdcRep0.setEncPart(encryptedData0);
      Ticket ticket0 = new Ticket((-644), (PrincipalName) null, encryptedData0);
      kdcRep0.setTicket(ticket0);
      String string0 = kdcRep0.toString();
      assertEquals("\n>-------------------------------------------------------------------------------\nKdcRep : TGS-REP\npvno : 5\nmsg-type : TGS_REP\ncrealm : null\ncname : null\nTicket :\n  tkt-vno : -644\n  realm : null\n  sname : null\n  enc-part : EncryptedData : {\n    etype: null\n    cipher: \n}\n\nEncryptedData : {\n    etype: null\n    cipher: \n}\n\n-------------------------------------------------------------------------------<\n", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_AP_REP_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1_KD;
      byte[] byteArray0 = new byte[3];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, byteArray0);
      Ticket ticket0 = new Ticket(0, (PrincipalName) null, encryptedData0);
      kdcRep0.setTicket(ticket0);
      Ticket ticket1 = kdcRep0.getTicket();
      assertNull(ticket1.getRealm());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      Ticket ticket0 = new Ticket((PrincipalName) null, (EncryptedData) null);
      kdcRep0.setTicket(ticket0);
      Ticket ticket1 = kdcRep0.getTicket();
      assertSame(ticket1, ticket0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptedData encryptedData0 = new EncryptedData();
      Ticket ticket0 = new Ticket((-644), (PrincipalName) null, encryptedData0);
      kdcRep0.setTicket(ticket0);
      Ticket ticket1 = kdcRep0.getTicket();
      assertEquals((-644), ticket1.getProtocolVersionNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.AP_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      kdcRep0.setPvno(0);
      int int0 = kdcRep0.getPvno();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.AP_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      kdcRep0.setProtocolVersionNumber((-1203));
      int int0 = kdcRep0.getPvno();
      assertEquals((-1203), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PaData paData0 = new PaData();
      kdcRep0.addPaData(paData0);
      List<PaData> list0 = kdcRep0.getPaData();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptedData encryptedData0 = new EncryptedData();
      kdcRep0.setEncPart(encryptedData0);
      EncryptedData encryptedData1 = kdcRep0.getEncPart();
      assertFalse(encryptedData1.hasKvno());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_TGS_REP_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncKdcRepPart encKdcRepPart0 = new EncKdcRepPart();
      kdcRep0.setEncKdcRepPart(encKdcRepPart0);
      EncKdcRepPart encKdcRepPart1 = kdcRep0.getEncKdcRepPart();
      assertEquals(0, encKdcRepPart1.getNonce());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_AP_REP_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      kdcRep0.setCRealm("ERR_04289");
      String string0 = kdcRep0.getCRealm();
      assertEquals("ERR_04289", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_CRED;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      kdcRep0.setCRealm("");
      String string0 = kdcRep0.getCRealm();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_AS_REP_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PrincipalName principalName0 = new PrincipalName((String) null, (-2473));
      kdcRep0.setCName(principalName0);
      PrincipalName principalName1 = kdcRep0.getCName();
      assertSame(principalName1, principalName0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_SAFE;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(3);
      // Undeclared exception!
      try { 
        kdcRep0.encode(byteBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.AS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PaDataType paDataType0 = PaDataType.SAM_CHALLENGE;
      byte[] byteArray0 = new byte[7];
      PaData paData0 = new PaData(paDataType0, byteArray0);
      kdcRep0.addPaData(paData0);
      // Undeclared exception!
      try { 
        kdcRep0.toString("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.AS_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      // Undeclared exception!
      try { 
        kdcRep0.toString("F?4(gVMe9{m#v|L:1Db");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_ERROR;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PaData paData0 = new PaData();
      kdcRep0.addPaData(paData0);
      // Undeclared exception!
      try { 
        kdcRep0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      // Undeclared exception!
      try { 
        kdcRep0.toString("/f<;i[)m)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_SAFE;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      try { 
        kdcRep0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_SAFE;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2126);
      // Undeclared exception!
      try { 
        kdcRep0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PaDataType paDataType0 = PaDataType.PA_ENC_TIMESTAMP;
      PaData paData0 = new PaData(paDataType0, (byte[]) null);
      kdcRep0.addPaData(paData0);
      // Undeclared exception!
      try { 
        kdcRep0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_TICKET_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncKdcRepPart encKdcRepPart0 = kdcRep0.getEncKdcRepPart();
      assertNull(encKdcRepPart0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_SAFE;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PaDataType paDataType0 = PaDataType.PA_ENCTYPE_INFO;
      byte[] byteArray0 = new byte[0];
      PaData paData0 = new PaData(paDataType0, byteArray0);
      kdcRep0.addPaData(paData0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(2126);
      // Undeclared exception!
      try { 
        kdcRep0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.KdcRep", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_AP_REP_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      Ticket ticket0 = kdcRep0.getTicket();
      assertNull(ticket0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.KRB_CRED;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      String string0 = kdcRep0.getCRealm();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      List<PaData> list0 = kdcRep0.getPaData();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_TICKET_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptionType encryptionType0 = EncryptionType.RC4_HMAC;
      byte[] byteArray0 = new byte[2];
      EncryptedData encryptedData0 = new EncryptedData(encryptionType0, 152, byteArray0);
      kdcRep0.setEncPart(encryptedData0);
      EncryptedData encryptedData1 = kdcRep0.getEncPart();
      assertTrue(EncryptedData.HAS_KVNO);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.ENC_TICKET_PART;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      EncryptedData encryptedData0 = kdcRep0.getEncPart();
      assertNull(encryptedData0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      PrincipalName principalName0 = kdcRep0.getCName();
      assertNull(principalName0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.AP_REP;
      KdcRep kdcRep0 = new KdcRep(kerberosMessageType0);
      int int0 = kdcRep0.getPvno();
      assertEquals(5, int0);
  }
}
