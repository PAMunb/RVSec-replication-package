/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:44:27 GMT 2022
 */

package org.apache.directory.shared.kerberos.flags;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.shared.kerberos.flags.TicketFlags;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TicketFlags_ESTest extends TicketFlags_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      ticketFlags0.setData((-1158));
      boolean boolean0 = ticketFlags0.isTransitedPolicyChecked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      ticketFlags0.value = 0;
      ticketFlags0.value = (-1256);
      boolean boolean0 = ticketFlags0.isReserved();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1490));
      boolean boolean0 = ticketFlags0.isRenewable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      ticketFlags0.value = 0;
      ticketFlags0.value = (-1256);
      boolean boolean0 = ticketFlags0.isProxy();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1490));
      boolean boolean0 = ticketFlags0.isProxiable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1));
      boolean boolean0 = ticketFlags0.isPreAuth();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1));
      boolean boolean0 = ticketFlags0.isPostdated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags(2464);
      boolean boolean0 = ticketFlags0.isOkAsDelegate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isMayPosdate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1490));
      boolean boolean0 = ticketFlags0.isInvalid();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1));
      boolean boolean0 = ticketFlags0.isInitial();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-1);
      TicketFlags ticketFlags0 = new TicketFlags(byteArray0);
      boolean boolean0 = ticketFlags0.isHwAuthent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1490));
      boolean boolean0 = ticketFlags0.isForwarded();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags(0);
      boolean boolean0 = ticketFlags0.isForwardable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      TicketFlags ticketFlags0 = null;
      try {
        ticketFlags0 = new TicketFlags(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The given flags is not correct
         //
         verifyException("org.apache.directory.shared.kerberos.flags.AbstractKerberosFlags", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-1);
      TicketFlags ticketFlags0 = new TicketFlags(byteArray0);
      String string0 = ticketFlags0.toString();
      assertEquals("RENEWABLE(8) INITIAL(9) PRE_AUTHENT(10) HW_AUTHENT(11) TRANSITED_POLICY_CHECKED(12) OK_AS_DELEGATE(13)", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      TicketFlags ticketFlags0 = new TicketFlags(byteArray0);
      String string0 = ticketFlags0.toString();
      assertEquals("RESERVED(0) FORWARDABLE(1) FORWARDED(2) PROXIABLE(3) PROXY(4) MAY_POSTDATE(5) POSTDATED(6) INVALID(7)", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      String string0 = ticketFlags0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isTransitedPolicyChecked();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isPostdated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-1490));
      boolean boolean0 = ticketFlags0.isMayPosdate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isProxiable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-794));
      boolean boolean0 = ticketFlags0.isForwardable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags((-640));
      boolean boolean0 = ticketFlags0.isOkAsDelegate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isRenewable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isReserved();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isHwAuthent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isProxy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isInitial();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isInvalid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isForwarded();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TicketFlags ticketFlags0 = new TicketFlags();
      boolean boolean0 = ticketFlags0.isPreAuth();
      assertFalse(boolean0);
  }
}
