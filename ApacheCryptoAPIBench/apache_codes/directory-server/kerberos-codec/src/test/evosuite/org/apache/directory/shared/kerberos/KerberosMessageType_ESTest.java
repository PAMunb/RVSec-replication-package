/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:27:58 GMT 2022
 */

package org.apache.directory.shared.kerberos;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.directory.shared.kerberos.KerberosMessageType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class KerberosMessageType_ESTest extends KerberosMessageType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      KerberosMessageType[] kerberosMessageTypeArray0 = KerberosMessageType.values();
      assertEquals(17, kerberosMessageTypeArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.valueOf("ENC_AS_REP_PART");
      assertEquals(KerberosMessageType.ENC_AS_REP_PART, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      KerberosMessageType.getTypeByValue(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(30);
      assertEquals(KerberosMessageType.KRB_ERROR, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      KerberosMessageType.getTypeByValue(29);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(28);
      assertEquals(KerberosMessageType.ENC_PRIV_PART, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(27);
      assertEquals(KerberosMessageType.ENC_AP_REP_PART, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KerberosMessageType.getTypeByValue(26);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KerberosMessageType.getTypeByValue(25);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KerberosMessageType.getTypeByValue(24);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KerberosMessageType.getTypeByValue(23);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(22);
      assertEquals(KerberosMessageType.KRB_CRED, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(21);
      assertEquals(KerberosMessageType.KRB_PRIV, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(20);
      assertEquals(KerberosMessageType.KRB_SAFE, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KerberosMessageType.getTypeByValue(19);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KerberosMessageType.getTypeByValue(17);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KerberosMessageType.getTypeByValue(16);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(15);
      assertEquals(KerberosMessageType.AP_REP, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(14);
      assertEquals(KerberosMessageType.AP_REQ, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(13);
      assertEquals(KerberosMessageType.TGS_REP, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(12);
      assertEquals(KerberosMessageType.TGS_REQ, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(11);
      assertEquals(KerberosMessageType.AS_REP, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(10);
      assertEquals(KerberosMessageType.AS_REQ, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      KerberosMessageType.getTypeByValue(9);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      KerberosMessageType.getTypeByValue(8);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      KerberosMessageType.getTypeByValue(7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      KerberosMessageType.getTypeByValue(6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      KerberosMessageType.getTypeByValue(5);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      KerberosMessageType.getTypeByValue(4);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(3);
      assertEquals(KerberosMessageType.ENC_TICKET_PART, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(2);
      assertEquals(KerberosMessageType.AUTHENTICATOR, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      KerberosMessageType.getTypeByValue(18);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.getTypeByValue(1);
      assertEquals(KerberosMessageType.TICKET, kerberosMessageType0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      String string0 = kerberosMessageType0.getMessage();
      assertEquals("request for authentication based on TGT", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KerberosMessageType kerberosMessageType0 = KerberosMessageType.TGS_REQ;
      int int0 = kerberosMessageType0.getValue();
      assertEquals(12, int0);
  }
}
