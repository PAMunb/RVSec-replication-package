/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 20:12:15 GMT 2022
 */

package org.apache.directory.server.kerberos.shared.crypto.encryption;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.directory.server.kerberos.shared.crypto.encryption.Aes128CtsSha1Encryption;
import org.apache.directory.server.kerberos.shared.crypto.encryption.Aes256CtsSha1Encryption;
import org.apache.directory.server.kerberos.shared.crypto.encryption.KeyUsage;
import org.apache.directory.shared.kerberos.components.EncryptedData;
import org.apache.directory.shared.kerberos.components.EncryptionKey;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AesCtsSha1Encryption_ESTest extends AesCtsSha1Encryption_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(128).when(keyUsage0).getOrdinal();
      byte[] byteArray1 = new byte[8];
      byte[] byteArray2 = aes128CtsSha1Encryption0.calculateChecksum(byteArray1, byteArray0, keyUsage0);
      assertEquals(12, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) byteArray0).when(encryptionKey0).getKeyValue();
      doReturn(3001).when(encryptionKey0).getKeyVersion();
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn((-898), 139).when(keyUsage0).getOrdinal();
      EncryptedData encryptedData0 = aes256CtsSha1Encryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage0);
      assertTrue(encryptedData0.hasKvno());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = aes128CtsSha1Encryption0.encrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray1 = aes128CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, 128, 273);
      assertEquals(34, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = aes128CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, 128, 4);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = aes128CtsSha1Encryption0.decrypt(byteArray0, byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = aes256CtsSha1Encryption0.decrypt(byteArray1, byteArray0);
      assertNotNull(byteArray2);
      assertEquals(0, byteArray2.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.getEncryptedData((EncryptionKey) null, byteArray0, (KeyUsage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.AesCtsSha1Encryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.getDecryptedData((EncryptionKey) null, (EncryptedData) null, (KeyUsage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.AesCtsSha1Encryption", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn((byte[]) null).when(encryptionKey0).getKeyValue();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(keyUsage0).getOrdinal();
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.getDecryptedData(encryptionKey0, (EncryptedData) null, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.encrypt(byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      aes128CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, (byte) (-75), (byte) (-75));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, 16, 1510);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      // Undeclared exception!
      try { 
        aes256CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, 1984, (-2375));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[3];
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.deriveKey(byteArray0, byteArray1, (byte)125, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      // Undeclared exception!
      try { 
        aes256CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, 2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.deriveKey(byteArray0, byteArray0, 16, 16);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.decrypt((byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      // Undeclared exception!
      try { 
        aes256CtsSha1Encryption0.calculateIntegrity((byte[]) null, (byte[]) null, (KeyUsage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(keyUsage0).getOrdinal();
      // Undeclared exception!
      try { 
        aes256CtsSha1Encryption0.calculateIntegrity((byte[]) null, (byte[]) null, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.calculateChecksum(byteArray0, byteArray0, (KeyUsage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.server.kerberos.shared.crypto.encryption.EncryptionEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(keyUsage0).getOrdinal();
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.calculateChecksum((byte[]) null, (byte[]) null, keyUsage0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      byte[] byteArray1 = aes256CtsSha1Encryption0.encrypt(byteArray0, byteArray0);
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      int int0 = aes128CtsSha1Encryption0.getConfounderLength();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Aes256CtsSha1Encryption aes256CtsSha1Encryption0 = new Aes256CtsSha1Encryption();
      byte[] byteArray1 = aes256CtsSha1Encryption0.decrypt(byteArray0, byteArray0);
      assertEquals(32, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[32];
      Aes128CtsSha1Encryption aes128CtsSha1Encryption0 = new Aes128CtsSha1Encryption();
      aes128CtsSha1Encryption0.getRandomBytes(0);
      aes128CtsSha1Encryption0.getKeyLength();
      KeyUsage keyUsage0 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(128).when(keyUsage0).getOrdinal();
      byte[] byteArray1 = aes128CtsSha1Encryption0.calculateChecksum(byteArray0, byteArray0, keyUsage0);
      KeyUsage keyUsage1 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(keyUsage1).getOrdinal();
      aes128CtsSha1Encryption0.calculateIntegrity(byteArray1, byteArray0, keyUsage1);
      aes128CtsSha1Encryption0.getChecksumLength();
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)17;
      byteArray2[1] = (byte)17;
      byteArray2[2] = (byte)17;
      byteArray2[3] = (byte) (-72);
      byteArray2[4] = (byte)123;
      byteArray2[6] = (byte)6;
      Aes128CtsSha1Encryption aes128CtsSha1Encryption1 = new Aes128CtsSha1Encryption();
      EncryptionKey encryptionKey0 = mock(EncryptionKey.class, new ViolatedAssumptionAnswer());
      doReturn((Object) byteArray0, (Object) null).when(encryptionKey0).getKeyValue();
      KeyUsage keyUsage2 = mock(KeyUsage.class, new ViolatedAssumptionAnswer());
      doReturn(1, 0).when(keyUsage2).getOrdinal();
      // Undeclared exception!
      try { 
        aes128CtsSha1Encryption0.getEncryptedData(encryptionKey0, byteArray0, keyUsage2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Missing argument
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }
}
