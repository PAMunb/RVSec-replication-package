/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 21 19:53:01 GMT 2022
 */

package org.apache.directory.shared.kerberos.components;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.ReadOnlyBufferException;
import org.apache.directory.shared.kerberos.codec.types.EncryptionType;
import org.apache.directory.shared.kerberos.components.ETypeInfoEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ETypeInfoEntry_ESTest extends ETypeInfoEntry_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      eTypeInfoEntry0.setEType(encryptionType0);
      eTypeInfoEntry0.computeLength();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      try { 
        eTypeInfoEntry0.encode(byteBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_138 The PDU buffer size is too small !
         //
         verifyException("org.apache.directory.shared.kerberos.components.ETypeInfoEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.AES128_CTS_HMAC_SHA1_96;
      byte[] byteArray0 = new byte[8];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect((byte)93);
      eTypeInfoEntry0.encode(byteBuffer0);
      assertEquals(19, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=19 lim=93 cap=93]", byteBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES_EDE3_CBC_ENV_OID;
      byte[] byteArray0 = new byte[3];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      byte[] byteArray1 = eTypeInfoEntry0.getSalt();
      assertEquals(3, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.AES256_CTS_HMAC_SHA1_96;
      byte[] byteArray0 = new byte[0];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      byte[] byteArray1 = eTypeInfoEntry0.getSalt();
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      eTypeInfoEntry0.getEType();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.NULL;
      byte[] byteArray0 = new byte[8];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      EncryptionType encryptionType1 = eTypeInfoEntry0.getEType();
      assertSame(encryptionType1, encryptionType0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.UNKNOWN;
      byte[] byteArray0 = new byte[7];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      EncryptionType encryptionType1 = eTypeInfoEntry0.getEType();
      assertEquals(EncryptionType.UNKNOWN, encryptionType1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      ByteBuffer byteBuffer1 = byteBuffer0.asReadOnlyBuffer();
      // Undeclared exception!
      try { 
        eTypeInfoEntry0.encode(byteBuffer1);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBufferR", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      byte[] byteArray0 = new byte[9];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        eTypeInfoEntry0.encode(byteBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.ETypeInfoEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      // Undeclared exception!
      try { 
        eTypeInfoEntry0.computeLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.directory.shared.kerberos.components.ETypeInfoEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.NULL;
      byte[] byteArray0 = new byte[8];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      String string0 = eTypeInfoEntry0.toString();
      assertEquals("ETYPE-INFO-ENTRY : {\n    etype: null (0)\n    salt: 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 \n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      String string0 = eTypeInfoEntry0.toString();
      assertEquals("ETYPE-INFO-ENTRY : {\n    etype: null\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      byte[] byteArray0 = new byte[9];
      EncryptionType encryptionType0 = EncryptionType.DES_CBC_MD5;
      eTypeInfoEntry0.setEType(encryptionType0);
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      eTypeInfoEntry0.encode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)48, (byte)0, (byte) (-96), (byte)0, (byte)2, (byte)1, (byte)3, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      try { 
        eTypeInfoEntry0.encode((ByteBuffer) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ERR_148 Cannot put a PDU in a null buffer !
         //
         verifyException("org.apache.directory.shared.kerberos.components.ETypeInfoEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      byte[] byteArray0 = new byte[6];
      EncryptionType encryptionType0 = EncryptionType.RC4_MD4;
      eTypeInfoEntry0.setEType(encryptionType0);
      eTypeInfoEntry0.setSalt(byteArray0);
      int int0 = eTypeInfoEntry0.computeLength();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry();
      byte[] byteArray0 = eTypeInfoEntry0.getSalt();
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EncryptionType encryptionType0 = EncryptionType.DES3_CBC_SHA1;
      byte[] byteArray0 = new byte[1];
      ETypeInfoEntry eTypeInfoEntry0 = new ETypeInfoEntry(encryptionType0, byteArray0);
      EncryptionType encryptionType1 = eTypeInfoEntry0.getEType();
      assertEquals(7, encryptionType1.getValue());
  }
}
